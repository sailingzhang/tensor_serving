// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_configure.proto

#include "server_configure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfigure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_model_config_server_5fconfigure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfigure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfigure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto;
namespace serving_configure {
class model_config_PrecisionMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<model_config_PrecisionMapEntry_DoNotUse> _instance;
} _model_config_PrecisionMapEntry_DoNotUse_default_instance_;
class model_config_LayoutMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<model_config_LayoutMapEntry_DoNotUse> _instance;
} _model_config_LayoutMapEntry_DoNotUse_default_instance_;
class model_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<model_config> _instance;
} _model_config_default_instance_;
class model_config_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<model_config_list> _instance;
} _model_config_list_default_instance_;
}  // namespace serving_configure
static void InitDefaultsscc_info_model_config_server_5fconfigure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serving_configure::_model_config_default_instance_;
    new (ptr) ::serving_configure::model_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serving_configure::model_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_model_config_server_5fconfigure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_model_config_server_5fconfigure_2eproto}, {
      &scc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto.base,
      &scc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto.base,}};

static void InitDefaultsscc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serving_configure::_model_config_LayoutMapEntry_DoNotUse_default_instance_;
    new (ptr) ::serving_configure::model_config_LayoutMapEntry_DoNotUse();
  }
  ::serving_configure::model_config_LayoutMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto}, {}};

static void InitDefaultsscc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serving_configure::_model_config_PrecisionMapEntry_DoNotUse_default_instance_;
    new (ptr) ::serving_configure::model_config_PrecisionMapEntry_DoNotUse();
  }
  ::serving_configure::model_config_PrecisionMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto}, {}};

static void InitDefaultsscc_info_model_config_list_server_5fconfigure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serving_configure::_model_config_list_default_instance_;
    new (ptr) ::serving_configure::model_config_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serving_configure::model_config_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_model_config_list_server_5fconfigure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_model_config_list_server_5fconfigure_2eproto}, {
      &scc_info_model_config_server_5fconfigure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fconfigure_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_5fconfigure_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fconfigure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fconfigure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_PrecisionMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_PrecisionMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_PrecisionMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_PrecisionMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_LayoutMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_LayoutMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_LayoutMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_LayoutMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, name_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, base_path_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, model_platform_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, version_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, infer_request_num_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, isload_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, device_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, is_auto_batch_size_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, batch_size_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, precision_map_),
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config, layout_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serving_configure::model_config_list, config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::serving_configure::model_config_PrecisionMapEntry_DoNotUse)},
  { 9, 16, sizeof(::serving_configure::model_config_LayoutMapEntry_DoNotUse)},
  { 18, -1, sizeof(::serving_configure::model_config)},
  { 34, -1, sizeof(::serving_configure::model_config_list)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serving_configure::_model_config_PrecisionMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serving_configure::_model_config_LayoutMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serving_configure::_model_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serving_configure::_model_config_list_default_instance_),
};

const char descriptor_table_protodef_server_5fconfigure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026server_configure.proto\022\021serving_config"
  "ure\"\226\004\n\014model_config\022\014\n\004name\030\001 \001(\t\022\021\n\tba"
  "se_path\030\002 \001(\t\022\026\n\016model_platform\030\003 \001(\t\022\017\n"
  "\007version\030\004 \001(\003\022\031\n\021infer_request_num\030\005 \001("
  "\005\022\016\n\006isload\030\006 \001(\010\022.\n\006device\030\007 \001(\0162\036.serv"
  "ing_configure.device_type\022\032\n\022is_auto_bat"
  "ch_size\030\010 \001(\010\022\022\n\nbatch_size\030\t \001(\005\022H\n\rpre"
  "cision_map\030\n \003(\01321.serving_configure.mod"
  "el_config.PrecisionMapEntry\022B\n\nlayout_ma"
  "p\030\013 \003(\0132..serving_configure.model_config"
  ".LayoutMapEntry\032Q\n\021PrecisionMapEntry\022\013\n\003"
  "key\030\001 \001(\t\022+\n\005value\030\002 \001(\0162\034.serving_confi"
  "gure.precision:\0028\001\032P\n\016LayoutMapEntry\022\013\n\003"
  "key\030\001 \001(\t\022-\n\005value\030\002 \001(\0162\036.serving_confi"
  "gure.layout_enum:\0028\001\"D\n\021model_config_lis"
  "t\022/\n\006config\030\001 \003(\0132\037.serving_configure.mo"
  "del_config*\262\001\n\013layout_enum\022\007\n\003ANY\020\000\022\010\n\004N"
  "CHW\020\001\022\010\n\004NHWC\020\002\022\t\n\005NCDHW\020\003\022\t\n\005NDHWC\020\004\022\010\n"
  "\004OIHW\020@\022\t\n\005GOIHW\020A\022\t\n\005OIDHW\020B\022\n\n\006GOIDHW\020"
  "C\022\n\n\006SCALAR\020_\022\005\n\001C\020`\022\010\n\003CHW\020\200\001\022\007\n\002HW\020\300\001\022"
  "\007\n\002NC\020\301\001\022\007\n\002CN\020\302\001\022\014\n\007BLOCKED\020\310\001*\037\n\013devic"
  "e_type\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001*H\n\tprecision\022\006\n"
  "\002U8\020\000\022\006\n\002I8\020\001\022\007\n\003I32\020\002\022\007\n\003I64\020\003\022\007\n\003F16\020\004"
  "\022\007\n\003F32\020\005\022\007\n\003F64\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fconfigure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fconfigure_2eproto_sccs[4] = {
  &scc_info_model_config_server_5fconfigure_2eproto.base,
  &scc_info_model_config_LayoutMapEntry_DoNotUse_server_5fconfigure_2eproto.base,
  &scc_info_model_config_PrecisionMapEntry_DoNotUse_server_5fconfigure_2eproto.base,
  &scc_info_model_config_list_server_5fconfigure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fconfigure_2eproto_once;
static bool descriptor_table_server_5fconfigure_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfigure_2eproto = {
  &descriptor_table_server_5fconfigure_2eproto_initialized, descriptor_table_protodef_server_5fconfigure_2eproto, "server_configure.proto", 946,
  &descriptor_table_server_5fconfigure_2eproto_once, descriptor_table_server_5fconfigure_2eproto_sccs, descriptor_table_server_5fconfigure_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_server_5fconfigure_2eproto::offsets,
  file_level_metadata_server_5fconfigure_2eproto, 4, file_level_enum_descriptors_server_5fconfigure_2eproto, file_level_service_descriptors_server_5fconfigure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fconfigure_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fconfigure_2eproto), true);
namespace serving_configure {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* layout_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fconfigure_2eproto);
  return file_level_enum_descriptors_server_5fconfigure_2eproto[0];
}
bool layout_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 64:
    case 65:
    case 66:
    case 67:
    case 95:
    case 96:
    case 128:
    case 192:
    case 193:
    case 194:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* device_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fconfigure_2eproto);
  return file_level_enum_descriptors_server_5fconfigure_2eproto[1];
}
bool device_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* precision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fconfigure_2eproto);
  return file_level_enum_descriptors_server_5fconfigure_2eproto[2];
}
bool precision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

model_config_PrecisionMapEntry_DoNotUse::model_config_PrecisionMapEntry_DoNotUse() {}
model_config_PrecisionMapEntry_DoNotUse::model_config_PrecisionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void model_config_PrecisionMapEntry_DoNotUse::MergeFrom(const model_config_PrecisionMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata model_config_PrecisionMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void model_config_PrecisionMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

model_config_LayoutMapEntry_DoNotUse::model_config_LayoutMapEntry_DoNotUse() {}
model_config_LayoutMapEntry_DoNotUse::model_config_LayoutMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void model_config_LayoutMapEntry_DoNotUse::MergeFrom(const model_config_LayoutMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata model_config_LayoutMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void model_config_LayoutMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void model_config::InitAsDefaultInstance() {
}
class model_config::_Internal {
 public:
};

model_config::model_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serving_configure.model_config)
}
model_config::model_config(const model_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  precision_map_.MergeFrom(from.precision_map_);
  layout_map_.MergeFrom(from.layout_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_path().empty()) {
    base_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  model_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_platform().empty()) {
    model_platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_platform_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:serving_configure.model_config)
}

void model_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_model_config_server_5fconfigure_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(batch_size_));
}

model_config::~model_config() {
  // @@protoc_insertion_point(destructor:serving_configure.model_config)
  SharedDtor();
}

void model_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void model_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const model_config& model_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_model_config_server_5fconfigure_2eproto.base);
  return *internal_default_instance();
}


void model_config::Clear() {
// @@protoc_insertion_point(message_clear_start:serving_configure.model_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  precision_map_.Clear();
  layout_map_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(batch_size_));
  _internal_metadata_.Clear();
}

const char* model_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serving_configure.model_config.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serving_configure.model_config.base_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serving_configure.model_config.model_platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 infer_request_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          infer_request_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serving_configure.device_type device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_device(static_cast<::serving_configure::device_type>(val));
        } else goto handle_unusual;
        continue;
      // bool is_auto_batch_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_auto_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .serving_configure.precision> precision_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&precision_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .serving_configure.layout_enum> layout_map = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&layout_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* model_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serving_configure.model_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serving_configure.model_config.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serving_configure.model_config.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // string model_platform = 3;
  if (this->model_platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_platform().data(), static_cast<int>(this->_internal_model_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serving_configure.model_config.model_platform");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_platform(), target);
  }

  // int64 version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  // int32 infer_request_num = 5;
  if (this->infer_request_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_infer_request_num(), target);
  }

  // bool isload = 6;
  if (this->isload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isload(), target);
  }

  // .serving_configure.device_type device = 7;
  if (this->device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_device(), target);
  }

  // bool is_auto_batch_size = 8;
  if (this->is_auto_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_auto_batch_size(), target);
  }

  // int32 batch_size = 9;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_batch_size(), target);
  }

  // map<string, .serving_configure.precision> precision_map = 10;
  if (!this->_internal_precision_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serving_configure.model_config.PrecisionMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_precision_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_precision_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >::const_iterator
          it = this->_internal_precision_map().begin();
          it != this->_internal_precision_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = model_config_PrecisionMapEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >::const_iterator
          it = this->_internal_precision_map().begin();
          it != this->_internal_precision_map().end(); ++it) {
        target = model_config_PrecisionMapEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .serving_configure.layout_enum> layout_map = 11;
  if (!this->_internal_layout_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serving_configure.model_config.LayoutMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_layout_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_layout_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >::const_iterator
          it = this->_internal_layout_map().begin();
          it != this->_internal_layout_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = model_config_LayoutMapEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >::const_iterator
          it = this->_internal_layout_map().begin();
          it != this->_internal_layout_map().end(); ++it) {
        target = model_config_LayoutMapEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serving_configure.model_config)
  return target;
}

size_t model_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serving_configure.model_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .serving_configure.precision> precision_map = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_precision_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >::const_iterator
      it = this->_internal_precision_map().begin();
      it != this->_internal_precision_map().end(); ++it) {
    total_size += model_config_PrecisionMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .serving_configure.layout_enum> layout_map = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_layout_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >::const_iterator
      it = this->_internal_layout_map().begin();
      it != this->_internal_layout_map().end(); ++it) {
    total_size += model_config_LayoutMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // string model_platform = 3;
  if (this->model_platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_platform());
  }

  // int64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  // int32 infer_request_num = 5;
  if (this->infer_request_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_infer_request_num());
  }

  // .serving_configure.device_type device = 7;
  if (this->device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device());
  }

  // bool isload = 6;
  if (this->isload() != 0) {
    total_size += 1 + 1;
  }

  // bool is_auto_batch_size = 8;
  if (this->is_auto_batch_size() != 0) {
    total_size += 1 + 1;
  }

  // int32 batch_size = 9;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void model_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serving_configure.model_config)
  GOOGLE_DCHECK_NE(&from, this);
  const model_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<model_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serving_configure.model_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serving_configure.model_config)
    MergeFrom(*source);
  }
}

void model_config::MergeFrom(const model_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serving_configure.model_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  precision_map_.MergeFrom(from.precision_map_);
  layout_map_.MergeFrom(from.layout_map_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.base_path().size() > 0) {

    base_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  if (from.model_platform().size() > 0) {

    model_platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_platform_);
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.infer_request_num() != 0) {
    _internal_set_infer_request_num(from._internal_infer_request_num());
  }
  if (from.device() != 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.isload() != 0) {
    _internal_set_isload(from._internal_isload());
  }
  if (from.is_auto_batch_size() != 0) {
    _internal_set_is_auto_batch_size(from._internal_is_auto_batch_size());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void model_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serving_configure.model_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_config::CopyFrom(const model_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serving_configure.model_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_config::IsInitialized() const {
  return true;
}

void model_config::InternalSwap(model_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  precision_map_.Swap(&other->precision_map_);
  layout_map_.Swap(&other->layout_map_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_path_.Swap(&other->base_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_platform_.Swap(&other->model_platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(infer_request_num_, other->infer_request_num_);
  swap(device_, other->device_);
  swap(isload_, other->isload_);
  swap(is_auto_batch_size_, other->is_auto_batch_size_);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata model_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void model_config_list::InitAsDefaultInstance() {
}
class model_config_list::_Internal {
 public:
};

model_config_list::model_config_list()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serving_configure.model_config_list)
}
model_config_list::model_config_list(const model_config_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serving_configure.model_config_list)
}

void model_config_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_model_config_list_server_5fconfigure_2eproto.base);
}

model_config_list::~model_config_list() {
  // @@protoc_insertion_point(destructor:serving_configure.model_config_list)
  SharedDtor();
}

void model_config_list::SharedDtor() {
}

void model_config_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const model_config_list& model_config_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_model_config_list_server_5fconfigure_2eproto.base);
  return *internal_default_instance();
}


void model_config_list::Clear() {
// @@protoc_insertion_point(message_clear_start:serving_configure.model_config_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear();
}

const char* model_config_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serving_configure.model_config config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* model_config_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serving_configure.model_config_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serving_configure.model_config config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serving_configure.model_config_list)
  return target;
}

size_t model_config_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serving_configure.model_config_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serving_configure.model_config config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void model_config_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serving_configure.model_config_list)
  GOOGLE_DCHECK_NE(&from, this);
  const model_config_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<model_config_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serving_configure.model_config_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serving_configure.model_config_list)
    MergeFrom(*source);
  }
}

void model_config_list::MergeFrom(const model_config_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serving_configure.model_config_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void model_config_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serving_configure.model_config_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_config_list::CopyFrom(const model_config_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serving_configure.model_config_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_config_list::IsInitialized() const {
  return true;
}

void model_config_list::InternalSwap(model_config_list* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata model_config_list::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving_configure
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serving_configure::model_config_PrecisionMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::serving_configure::model_config_PrecisionMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serving_configure::model_config_PrecisionMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serving_configure::model_config_LayoutMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::serving_configure::model_config_LayoutMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serving_configure::model_config_LayoutMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serving_configure::model_config* Arena::CreateMaybeMessage< ::serving_configure::model_config >(Arena* arena) {
  return Arena::CreateInternal< ::serving_configure::model_config >(arena);
}
template<> PROTOBUF_NOINLINE ::serving_configure::model_config_list* Arena::CreateMaybeMessage< ::serving_configure::model_config_list >(Arena* arena) {
  return Arena::CreateInternal< ::serving_configure::model_config_list >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
