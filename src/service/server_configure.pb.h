// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_configure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fconfigure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fconfigure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fconfigure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fconfigure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfigure_2eproto;
namespace serving_configure {
class model_config;
class model_configDefaultTypeInternal;
extern model_configDefaultTypeInternal _model_config_default_instance_;
class model_config_LayoutMapEntry_DoNotUse;
class model_config_LayoutMapEntry_DoNotUseDefaultTypeInternal;
extern model_config_LayoutMapEntry_DoNotUseDefaultTypeInternal _model_config_LayoutMapEntry_DoNotUse_default_instance_;
class model_config_PrecisionMapEntry_DoNotUse;
class model_config_PrecisionMapEntry_DoNotUseDefaultTypeInternal;
extern model_config_PrecisionMapEntry_DoNotUseDefaultTypeInternal _model_config_PrecisionMapEntry_DoNotUse_default_instance_;
class model_config_list;
class model_config_listDefaultTypeInternal;
extern model_config_listDefaultTypeInternal _model_config_list_default_instance_;
}  // namespace serving_configure
PROTOBUF_NAMESPACE_OPEN
template<> ::serving_configure::model_config* Arena::CreateMaybeMessage<::serving_configure::model_config>(Arena*);
template<> ::serving_configure::model_config_LayoutMapEntry_DoNotUse* Arena::CreateMaybeMessage<::serving_configure::model_config_LayoutMapEntry_DoNotUse>(Arena*);
template<> ::serving_configure::model_config_PrecisionMapEntry_DoNotUse* Arena::CreateMaybeMessage<::serving_configure::model_config_PrecisionMapEntry_DoNotUse>(Arena*);
template<> ::serving_configure::model_config_list* Arena::CreateMaybeMessage<::serving_configure::model_config_list>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serving_configure {

enum layout_enum : int {
  ANY = 0,
  NCHW = 1,
  NHWC = 2,
  NCDHW = 3,
  NDHWC = 4,
  OIHW = 64,
  GOIHW = 65,
  OIDHW = 66,
  GOIDHW = 67,
  SCALAR = 95,
  C = 96,
  CHW = 128,
  HW = 192,
  NC = 193,
  CN = 194,
  BLOCKED = 200,
  layout_enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  layout_enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool layout_enum_IsValid(int value);
constexpr layout_enum layout_enum_MIN = ANY;
constexpr layout_enum layout_enum_MAX = BLOCKED;
constexpr int layout_enum_ARRAYSIZE = layout_enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* layout_enum_descriptor();
template<typename T>
inline const std::string& layout_enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, layout_enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function layout_enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    layout_enum_descriptor(), enum_t_value);
}
inline bool layout_enum_Parse(
    const std::string& name, layout_enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<layout_enum>(
    layout_enum_descriptor(), name, value);
}
enum device_type : int {
  CPU = 0,
  GPU = 1,
  device_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  device_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool device_type_IsValid(int value);
constexpr device_type device_type_MIN = CPU;
constexpr device_type device_type_MAX = GPU;
constexpr int device_type_ARRAYSIZE = device_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* device_type_descriptor();
template<typename T>
inline const std::string& device_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, device_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function device_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    device_type_descriptor(), enum_t_value);
}
inline bool device_type_Parse(
    const std::string& name, device_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<device_type>(
    device_type_descriptor(), name, value);
}
enum precision : int {
  U8 = 0,
  I8 = 1,
  I32 = 2,
  I64 = 3,
  F16 = 4,
  F32 = 5,
  F64 = 6,
  precision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  precision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool precision_IsValid(int value);
constexpr precision precision_MIN = U8;
constexpr precision precision_MAX = F64;
constexpr int precision_ARRAYSIZE = precision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* precision_descriptor();
template<typename T>
inline const std::string& precision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, precision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function precision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    precision_descriptor(), enum_t_value);
}
inline bool precision_Parse(
    const std::string& name, precision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<precision>(
    precision_descriptor(), name, value);
}
// ===================================================================

class model_config_PrecisionMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<model_config_PrecisionMapEntry_DoNotUse, 
    std::string, ::serving_configure::precision,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<model_config_PrecisionMapEntry_DoNotUse, 
    std::string, ::serving_configure::precision,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  model_config_PrecisionMapEntry_DoNotUse();
  model_config_PrecisionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const model_config_PrecisionMapEntry_DoNotUse& other);
  static const model_config_PrecisionMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const model_config_PrecisionMapEntry_DoNotUse*>(&_model_config_PrecisionMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serving_configure.model_config.PrecisionMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfigure_2eproto);
    return ::descriptor_table_server_5fconfigure_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class model_config_LayoutMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<model_config_LayoutMapEntry_DoNotUse, 
    std::string, ::serving_configure::layout_enum,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<model_config_LayoutMapEntry_DoNotUse, 
    std::string, ::serving_configure::layout_enum,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  model_config_LayoutMapEntry_DoNotUse();
  model_config_LayoutMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const model_config_LayoutMapEntry_DoNotUse& other);
  static const model_config_LayoutMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const model_config_LayoutMapEntry_DoNotUse*>(&_model_config_LayoutMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serving_configure.model_config.LayoutMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfigure_2eproto);
    return ::descriptor_table_server_5fconfigure_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class model_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serving_configure.model_config) */ {
 public:
  model_config();
  virtual ~model_config();

  model_config(const model_config& from);
  model_config(model_config&& from) noexcept
    : model_config() {
    *this = ::std::move(from);
  }

  inline model_config& operator=(const model_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline model_config& operator=(model_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const model_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const model_config* internal_default_instance() {
    return reinterpret_cast<const model_config*>(
               &_model_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(model_config& a, model_config& b) {
    a.Swap(&b);
  }
  inline void Swap(model_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline model_config* New() const final {
    return CreateMaybeMessage<model_config>(nullptr);
  }

  model_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<model_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const model_config& from);
  void MergeFrom(const model_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(model_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serving_configure.model_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfigure_2eproto);
    return ::descriptor_table_server_5fconfigure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPrecisionMapFieldNumber = 10,
    kLayoutMapFieldNumber = 11,
    kNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kModelPlatformFieldNumber = 3,
    kVersionFieldNumber = 4,
    kInferRequestNumFieldNumber = 5,
    kDeviceFieldNumber = 7,
    kIsloadFieldNumber = 6,
    kIsAutoBatchSizeFieldNumber = 8,
    kBatchSizeFieldNumber = 9,
  };
  // map<string, .serving_configure.precision> precision_map = 10;
  int precision_map_size() const;
  private:
  int _internal_precision_map_size() const;
  public:
  void clear_precision_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >&
      _internal_precision_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >*
      _internal_mutable_precision_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >&
      precision_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >*
      mutable_precision_map();

  // map<string, .serving_configure.layout_enum> layout_map = 11;
  int layout_map_size() const;
  private:
  int _internal_layout_map_size() const;
  public:
  void clear_layout_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >&
      _internal_layout_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >*
      _internal_mutable_layout_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >&
      layout_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >*
      mutable_layout_map();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_path = 2;
  void clear_base_path();
  const std::string& base_path() const;
  void set_base_path(const std::string& value);
  void set_base_path(std::string&& value);
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  std::string* mutable_base_path();
  std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // string model_platform = 3;
  void clear_model_platform();
  const std::string& model_platform() const;
  void set_model_platform(const std::string& value);
  void set_model_platform(std::string&& value);
  void set_model_platform(const char* value);
  void set_model_platform(const char* value, size_t size);
  std::string* mutable_model_platform();
  std::string* release_model_platform();
  void set_allocated_model_platform(std::string* model_platform);
  private:
  const std::string& _internal_model_platform() const;
  void _internal_set_model_platform(const std::string& value);
  std::string* _internal_mutable_model_platform();
  public:

  // int64 version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 infer_request_num = 5;
  void clear_infer_request_num();
  ::PROTOBUF_NAMESPACE_ID::int32 infer_request_num() const;
  void set_infer_request_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_infer_request_num() const;
  void _internal_set_infer_request_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .serving_configure.device_type device = 7;
  void clear_device();
  ::serving_configure::device_type device() const;
  void set_device(::serving_configure::device_type value);
  private:
  ::serving_configure::device_type _internal_device() const;
  void _internal_set_device(::serving_configure::device_type value);
  public:

  // bool isload = 6;
  void clear_isload();
  bool isload() const;
  void set_isload(bool value);
  private:
  bool _internal_isload() const;
  void _internal_set_isload(bool value);
  public:

  // bool is_auto_batch_size = 8;
  void clear_is_auto_batch_size();
  bool is_auto_batch_size() const;
  void set_is_auto_batch_size(bool value);
  private:
  bool _internal_is_auto_batch_size() const;
  void _internal_set_is_auto_batch_size(bool value);
  public:

  // int32 batch_size = 9;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serving_configure.model_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      model_config_PrecisionMapEntry_DoNotUse,
      std::string, ::serving_configure::precision,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
      0 > precision_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      model_config_LayoutMapEntry_DoNotUse,
      std::string, ::serving_configure::layout_enum,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
      0 > layout_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_platform_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 infer_request_num_;
  int device_;
  bool isload_;
  bool is_auto_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfigure_2eproto;
};
// -------------------------------------------------------------------

class model_config_list :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serving_configure.model_config_list) */ {
 public:
  model_config_list();
  virtual ~model_config_list();

  model_config_list(const model_config_list& from);
  model_config_list(model_config_list&& from) noexcept
    : model_config_list() {
    *this = ::std::move(from);
  }

  inline model_config_list& operator=(const model_config_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline model_config_list& operator=(model_config_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const model_config_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const model_config_list* internal_default_instance() {
    return reinterpret_cast<const model_config_list*>(
               &_model_config_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(model_config_list& a, model_config_list& b) {
    a.Swap(&b);
  }
  inline void Swap(model_config_list* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline model_config_list* New() const final {
    return CreateMaybeMessage<model_config_list>(nullptr);
  }

  model_config_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<model_config_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const model_config_list& from);
  void MergeFrom(const model_config_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(model_config_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serving_configure.model_config_list";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfigure_2eproto);
    return ::descriptor_table_server_5fconfigure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .serving_configure.model_config config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::serving_configure::model_config* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serving_configure::model_config >*
      mutable_config();
  private:
  const ::serving_configure::model_config& _internal_config(int index) const;
  ::serving_configure::model_config* _internal_add_config();
  public:
  const ::serving_configure::model_config& config(int index) const;
  ::serving_configure::model_config* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serving_configure::model_config >&
      config() const;

  // @@protoc_insertion_point(class_scope:serving_configure.model_config_list)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serving_configure::model_config > config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfigure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// model_config

// string name = 1;
inline void model_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& model_config::name() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.name)
  return _internal_name();
}
inline void model_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.name)
}
inline std::string* model_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serving_configure.model_config.name)
  return _internal_mutable_name();
}
inline const std::string& model_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void model_config::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void model_config::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving_configure.model_config.name)
}
inline void model_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving_configure.model_config.name)
}
inline void model_config::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving_configure.model_config.name)
}
inline std::string* model_config::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* model_config::release_name() {
  // @@protoc_insertion_point(field_release:serving_configure.model_config.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void model_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serving_configure.model_config.name)
}

// string base_path = 2;
inline void model_config::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& model_config::base_path() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.base_path)
  return _internal_base_path();
}
inline void model_config::set_base_path(const std::string& value) {
  _internal_set_base_path(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.base_path)
}
inline std::string* model_config::mutable_base_path() {
  // @@protoc_insertion_point(field_mutable:serving_configure.model_config.base_path)
  return _internal_mutable_base_path();
}
inline const std::string& model_config::_internal_base_path() const {
  return base_path_.GetNoArena();
}
inline void model_config::_internal_set_base_path(const std::string& value) {
  
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void model_config::set_base_path(std::string&& value) {
  
  base_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving_configure.model_config.base_path)
}
inline void model_config::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving_configure.model_config.base_path)
}
inline void model_config::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving_configure.model_config.base_path)
}
inline std::string* model_config::_internal_mutable_base_path() {
  
  return base_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* model_config::release_base_path() {
  // @@protoc_insertion_point(field_release:serving_configure.model_config.base_path)
  
  return base_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void model_config::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:serving_configure.model_config.base_path)
}

// string model_platform = 3;
inline void model_config::clear_model_platform() {
  model_platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& model_config::model_platform() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.model_platform)
  return _internal_model_platform();
}
inline void model_config::set_model_platform(const std::string& value) {
  _internal_set_model_platform(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.model_platform)
}
inline std::string* model_config::mutable_model_platform() {
  // @@protoc_insertion_point(field_mutable:serving_configure.model_config.model_platform)
  return _internal_mutable_model_platform();
}
inline const std::string& model_config::_internal_model_platform() const {
  return model_platform_.GetNoArena();
}
inline void model_config::_internal_set_model_platform(const std::string& value) {
  
  model_platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void model_config::set_model_platform(std::string&& value) {
  
  model_platform_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving_configure.model_config.model_platform)
}
inline void model_config::set_model_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving_configure.model_config.model_platform)
}
inline void model_config::set_model_platform(const char* value, size_t size) {
  
  model_platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving_configure.model_config.model_platform)
}
inline std::string* model_config::_internal_mutable_model_platform() {
  
  return model_platform_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* model_config::release_model_platform() {
  // @@protoc_insertion_point(field_release:serving_configure.model_config.model_platform)
  
  return model_platform_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void model_config::set_allocated_model_platform(std::string* model_platform) {
  if (model_platform != nullptr) {
    
  } else {
    
  }
  model_platform_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_platform);
  // @@protoc_insertion_point(field_set_allocated:serving_configure.model_config.model_platform)
}

// int64 version = 4;
inline void model_config::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 model_config::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 model_config::version() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.version)
  return _internal_version();
}
inline void model_config::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void model_config::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.version)
}

// int32 infer_request_num = 5;
inline void model_config::clear_infer_request_num() {
  infer_request_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 model_config::_internal_infer_request_num() const {
  return infer_request_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 model_config::infer_request_num() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.infer_request_num)
  return _internal_infer_request_num();
}
inline void model_config::_internal_set_infer_request_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  infer_request_num_ = value;
}
inline void model_config::set_infer_request_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_infer_request_num(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.infer_request_num)
}

// bool isload = 6;
inline void model_config::clear_isload() {
  isload_ = false;
}
inline bool model_config::_internal_isload() const {
  return isload_;
}
inline bool model_config::isload() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.isload)
  return _internal_isload();
}
inline void model_config::_internal_set_isload(bool value) {
  
  isload_ = value;
}
inline void model_config::set_isload(bool value) {
  _internal_set_isload(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.isload)
}

// .serving_configure.device_type device = 7;
inline void model_config::clear_device() {
  device_ = 0;
}
inline ::serving_configure::device_type model_config::_internal_device() const {
  return static_cast< ::serving_configure::device_type >(device_);
}
inline ::serving_configure::device_type model_config::device() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.device)
  return _internal_device();
}
inline void model_config::_internal_set_device(::serving_configure::device_type value) {
  
  device_ = value;
}
inline void model_config::set_device(::serving_configure::device_type value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.device)
}

// bool is_auto_batch_size = 8;
inline void model_config::clear_is_auto_batch_size() {
  is_auto_batch_size_ = false;
}
inline bool model_config::_internal_is_auto_batch_size() const {
  return is_auto_batch_size_;
}
inline bool model_config::is_auto_batch_size() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.is_auto_batch_size)
  return _internal_is_auto_batch_size();
}
inline void model_config::_internal_set_is_auto_batch_size(bool value) {
  
  is_auto_batch_size_ = value;
}
inline void model_config::set_is_auto_batch_size(bool value) {
  _internal_set_is_auto_batch_size(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.is_auto_batch_size)
}

// int32 batch_size = 9;
inline void model_config::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 model_config::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 model_config::batch_size() const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config.batch_size)
  return _internal_batch_size();
}
inline void model_config::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_size_ = value;
}
inline void model_config::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:serving_configure.model_config.batch_size)
}

// map<string, .serving_configure.precision> precision_map = 10;
inline int model_config::_internal_precision_map_size() const {
  return precision_map_.size();
}
inline int model_config::precision_map_size() const {
  return _internal_precision_map_size();
}
inline void model_config::clear_precision_map() {
  precision_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >&
model_config::_internal_precision_map() const {
  return precision_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >&
model_config::precision_map() const {
  // @@protoc_insertion_point(field_map:serving_configure.model_config.precision_map)
  return _internal_precision_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >*
model_config::_internal_mutable_precision_map() {
  return precision_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::precision >*
model_config::mutable_precision_map() {
  // @@protoc_insertion_point(field_mutable_map:serving_configure.model_config.precision_map)
  return _internal_mutable_precision_map();
}

// map<string, .serving_configure.layout_enum> layout_map = 11;
inline int model_config::_internal_layout_map_size() const {
  return layout_map_.size();
}
inline int model_config::layout_map_size() const {
  return _internal_layout_map_size();
}
inline void model_config::clear_layout_map() {
  layout_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >&
model_config::_internal_layout_map() const {
  return layout_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >&
model_config::layout_map() const {
  // @@protoc_insertion_point(field_map:serving_configure.model_config.layout_map)
  return _internal_layout_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >*
model_config::_internal_mutable_layout_map() {
  return layout_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serving_configure::layout_enum >*
model_config::mutable_layout_map() {
  // @@protoc_insertion_point(field_mutable_map:serving_configure.model_config.layout_map)
  return _internal_mutable_layout_map();
}

// -------------------------------------------------------------------

// model_config_list

// repeated .serving_configure.model_config config = 1;
inline int model_config_list::_internal_config_size() const {
  return config_.size();
}
inline int model_config_list::config_size() const {
  return _internal_config_size();
}
inline void model_config_list::clear_config() {
  config_.Clear();
}
inline ::serving_configure::model_config* model_config_list::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:serving_configure.model_config_list.config)
  return config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serving_configure::model_config >*
model_config_list::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:serving_configure.model_config_list.config)
  return &config_;
}
inline const ::serving_configure::model_config& model_config_list::_internal_config(int index) const {
  return config_.Get(index);
}
inline const ::serving_configure::model_config& model_config_list::config(int index) const {
  // @@protoc_insertion_point(field_get:serving_configure.model_config_list.config)
  return _internal_config(index);
}
inline ::serving_configure::model_config* model_config_list::_internal_add_config() {
  return config_.Add();
}
inline ::serving_configure::model_config* model_config_list::add_config() {
  // @@protoc_insertion_point(field_add:serving_configure.model_config_list.config)
  return _internal_add_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serving_configure::model_config >&
model_config_list::config() const {
  // @@protoc_insertion_point(field_list:serving_configure.model_config_list.config)
  return config_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving_configure

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::serving_configure::layout_enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serving_configure::layout_enum>() {
  return ::serving_configure::layout_enum_descriptor();
}
template <> struct is_proto_enum< ::serving_configure::device_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serving_configure::device_type>() {
  return ::serving_configure::device_type_descriptor();
}
template <> struct is_proto_enum< ::serving_configure::precision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serving_configure::precision>() {
  return ::serving_configure::precision_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fconfigure_2eproto
