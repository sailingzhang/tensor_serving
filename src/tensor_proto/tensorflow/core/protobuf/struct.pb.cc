// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/struct.proto

#include "tensorflow/core/protobuf/struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto;
namespace tensorflow {
class StructuredValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StructuredValue> _instance;
  const ::tensorflow::NoneValue* none_value_;
  double float64_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  bool bool_value_;
  const ::tensorflow::TensorShapeProto* tensor_shape_value_;
  int tensor_dtype_value_;
  const ::tensorflow::TensorSpecProto* tensor_spec_value_;
  const ::tensorflow::TypeSpecProto* type_spec_value_;
  const ::tensorflow::ListValue* list_value_;
  const ::tensorflow::TupleValue* tuple_value_;
  const ::tensorflow::DictValue* dict_value_;
  const ::tensorflow::NamedTupleValue* named_tuple_value_;
} _StructuredValue_default_instance_;
class NoneValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoneValue> _instance;
} _NoneValue_default_instance_;
class ListValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValue> _instance;
} _ListValue_default_instance_;
class TupleValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TupleValue> _instance;
} _TupleValue_default_instance_;
class DictValue_FieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictValue_FieldsEntry_DoNotUse> _instance;
} _DictValue_FieldsEntry_DoNotUse_default_instance_;
class DictValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictValue> _instance;
} _DictValue_default_instance_;
class PairValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PairValue> _instance;
} _PairValue_default_instance_;
class NamedTupleValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedTupleValue> _instance;
} _NamedTupleValue_default_instance_;
class TensorSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorSpecProto> _instance;
} _TensorSpecProto_default_instance_;
class TypeSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypeSpecProto> _instance;
} _TypeSpecProto_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_StructuredValue_default_instance_;
    new (ptr) ::tensorflow::StructuredValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_ListValue_default_instance_;
    new (ptr) ::tensorflow::ListValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_TupleValue_default_instance_;
    new (ptr) ::tensorflow::TupleValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_DictValue_FieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::DictValue_FieldsEntry_DoNotUse();
  }
  {
    void* ptr = &::tensorflow::_DictValue_default_instance_;
    new (ptr) ::tensorflow::DictValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_PairValue_default_instance_;
    new (ptr) ::tensorflow::PairValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_NamedTupleValue_default_instance_;
    new (ptr) ::tensorflow::NamedTupleValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_TypeSpecProto_default_instance_;
    new (ptr) ::tensorflow::TypeSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::StructuredValue::InitAsDefaultInstance();
  ::tensorflow::ListValue::InitAsDefaultInstance();
  ::tensorflow::TupleValue::InitAsDefaultInstance();
  ::tensorflow::DictValue_FieldsEntry_DoNotUse::InitAsDefaultInstance();
  ::tensorflow::DictValue::InitAsDefaultInstance();
  ::tensorflow::PairValue::InitAsDefaultInstance();
  ::tensorflow::NamedTupleValue::InitAsDefaultInstance();
  ::tensorflow::TypeSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto}, {
      &scc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_NoneValue_default_instance_;
    new (ptr) ::tensorflow::NoneValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::NoneValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto}, {}};

static void InitDefaultsscc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorSpecProto_default_instance_;
    new (ptr) ::tensorflow::TensorSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, none_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, float64_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, int64_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, string_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, bool_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, tensor_shape_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, tensor_dtype_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, tensor_spec_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, type_spec_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, list_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, tuple_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, dict_value_),
  offsetof(::tensorflow::StructuredValueDefaultTypeInternal, named_tuple_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NoneValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TupleValue, values_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, type_spec_class_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, type_state_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, type_spec_class_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::StructuredValue)},
  { 19, -1, sizeof(::tensorflow::NoneValue)},
  { 24, -1, sizeof(::tensorflow::ListValue)},
  { 30, -1, sizeof(::tensorflow::TupleValue)},
  { 36, 43, sizeof(::tensorflow::DictValue_FieldsEntry_DoNotUse)},
  { 45, -1, sizeof(::tensorflow::DictValue)},
  { 51, -1, sizeof(::tensorflow::PairValue)},
  { 58, -1, sizeof(::tensorflow::NamedTupleValue)},
  { 65, -1, sizeof(::tensorflow::TensorSpecProto)},
  { 73, -1, sizeof(::tensorflow::TypeSpecProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_StructuredValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NoneValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ListValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TupleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DictValue_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DictValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_PairValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NamedTupleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TensorSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TypeSpecProto_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%tensorflow/core/protobuf/struct.proto\022"
  "\ntensorflow\032,tensorflow/core/framework/t"
  "ensor_shape.proto\032%tensorflow/core/frame"
  "work/types.proto\"\307\004\n\017StructuredValue\022+\n\n"
  "none_value\030\001 \001(\0132\025.tensorflow.NoneValueH"
  "\000\022\027\n\rfloat64_value\030\013 \001(\001H\000\022\025\n\013int64_valu"
  "e\030\014 \001(\022H\000\022\026\n\014string_value\030\r \001(\tH\000\022\024\n\nboo"
  "l_value\030\016 \001(\010H\000\022:\n\022tensor_shape_value\030\037 "
  "\001(\0132\034.tensorflow.TensorShapeProtoH\000\0222\n\022t"
  "ensor_dtype_value\030  \001(\0162\024.tensorflow.Dat"
  "aTypeH\000\0228\n\021tensor_spec_value\030! \001(\0132\033.ten"
  "sorflow.TensorSpecProtoH\000\0224\n\017type_spec_v"
  "alue\030\" \001(\0132\031.tensorflow.TypeSpecProtoH\000\022"
  "+\n\nlist_value\0303 \001(\0132\025.tensorflow.ListVal"
  "ueH\000\022-\n\013tuple_value\0304 \001(\0132\026.tensorflow.T"
  "upleValueH\000\022+\n\ndict_value\0305 \001(\0132\025.tensor"
  "flow.DictValueH\000\0228\n\021named_tuple_value\0306 "
  "\001(\0132\033.tensorflow.NamedTupleValueH\000B\006\n\004ki"
  "nd\"\013\n\tNoneValue\"8\n\tListValue\022+\n\006values\030\001"
  " \003(\0132\033.tensorflow.StructuredValue\"9\n\nTup"
  "leValue\022+\n\006values\030\001 \003(\0132\033.tensorflow.Str"
  "ucturedValue\"\212\001\n\tDictValue\0221\n\006fields\030\001 \003"
  "(\0132!.tensorflow.DictValue.FieldsEntry\032J\n"
  "\013FieldsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\013"
  "2\033.tensorflow.StructuredValue:\0028\001\"D\n\tPai"
  "rValue\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.ten"
  "sorflow.StructuredValue\"F\n\017NamedTupleVal"
  "ue\022\014\n\004name\030\001 \001(\t\022%\n\006values\030\002 \003(\0132\025.tenso"
  "rflow.PairValue\"q\n\017TensorSpecProto\022\014\n\004na"
  "me\030\001 \001(\t\022+\n\005shape\030\002 \001(\0132\034.tensorflow.Ten"
  "sorShapeProto\022#\n\005dtype\030\003 \001(\0162\024.tensorflo"
  "w.DataType\"\212\003\n\rTypeSpecProto\022@\n\017type_spe"
  "c_class\030\001 \001(\0162\'.tensorflow.TypeSpecProto"
  ".TypeSpecClass\022/\n\ntype_state\030\002 \001(\0132\033.ten"
  "sorflow.StructuredValue\022\034\n\024type_spec_cla"
  "ss_name\030\003 \001(\t\"\347\001\n\rTypeSpecClass\022\013\n\007UNKNO"
  "WN\020\000\022\026\n\022SPARSE_TENSOR_SPEC\020\001\022\027\n\023INDEXED_"
  "SLICES_SPEC\020\002\022\026\n\022RAGGED_TENSOR_SPEC\020\003\022\025\n"
  "\021TENSOR_ARRAY_SPEC\020\004\022\025\n\021DATA_DATASET_SPE"
  "C\020\005\022\026\n\022DATA_ITERATOR_SPEC\020\006\022\021\n\rOPTIONAL_"
  "SPEC\020\007\022\024\n\020PER_REPLICA_SPEC\020\010\022\021\n\rVARIABLE"
  "_SPEC\020\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_sccs[3] = {
  &scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,
  &scc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,
  &scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto, "tensorflow/core/protobuf/struct.proto", 1655,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto, 10, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeSpecProto_TypeSpecClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[0];
}
bool TypeSpecProto_TypeSpecClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::UNKNOWN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::SPARSE_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::INDEXED_SLICES_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::RAGGED_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TENSOR_ARRAY_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_DATASET_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_ITERATOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::OPTIONAL_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::PER_REPLICA_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::VARIABLE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MIN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MAX;
constexpr int TypeSpecProto::TypeSpecClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StructuredValue::InitAsDefaultInstance() {
  ::tensorflow::_StructuredValue_default_instance_.none_value_ = const_cast< ::tensorflow::NoneValue*>(
      ::tensorflow::NoneValue::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.float64_value_ = 0;
  ::tensorflow::_StructuredValue_default_instance_.int64_value_ = PROTOBUF_LONGLONG(0);
  ::tensorflow::_StructuredValue_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_StructuredValue_default_instance_.bool_value_ = false;
  ::tensorflow::_StructuredValue_default_instance_.tensor_shape_value_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.tensor_dtype_value_ = 0;
  ::tensorflow::_StructuredValue_default_instance_.tensor_spec_value_ = const_cast< ::tensorflow::TensorSpecProto*>(
      ::tensorflow::TensorSpecProto::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.type_spec_value_ = const_cast< ::tensorflow::TypeSpecProto*>(
      ::tensorflow::TypeSpecProto::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.list_value_ = const_cast< ::tensorflow::ListValue*>(
      ::tensorflow::ListValue::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.tuple_value_ = const_cast< ::tensorflow::TupleValue*>(
      ::tensorflow::TupleValue::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.dict_value_ = const_cast< ::tensorflow::DictValue*>(
      ::tensorflow::DictValue::internal_default_instance());
  ::tensorflow::_StructuredValue_default_instance_.named_tuple_value_ = const_cast< ::tensorflow::NamedTupleValue*>(
      ::tensorflow::NamedTupleValue::internal_default_instance());
}
class StructuredValue::_Internal {
 public:
  static const ::tensorflow::NoneValue& none_value(const StructuredValue* msg);
  static const ::tensorflow::TensorShapeProto& tensor_shape_value(const StructuredValue* msg);
  static const ::tensorflow::TensorSpecProto& tensor_spec_value(const StructuredValue* msg);
  static const ::tensorflow::TypeSpecProto& type_spec_value(const StructuredValue* msg);
  static const ::tensorflow::ListValue& list_value(const StructuredValue* msg);
  static const ::tensorflow::TupleValue& tuple_value(const StructuredValue* msg);
  static const ::tensorflow::DictValue& dict_value(const StructuredValue* msg);
  static const ::tensorflow::NamedTupleValue& named_tuple_value(const StructuredValue* msg);
};

const ::tensorflow::NoneValue&
StructuredValue::_Internal::none_value(const StructuredValue* msg) {
  return *msg->kind_.none_value_;
}
const ::tensorflow::TensorShapeProto&
StructuredValue::_Internal::tensor_shape_value(const StructuredValue* msg) {
  return *msg->kind_.tensor_shape_value_;
}
const ::tensorflow::TensorSpecProto&
StructuredValue::_Internal::tensor_spec_value(const StructuredValue* msg) {
  return *msg->kind_.tensor_spec_value_;
}
const ::tensorflow::TypeSpecProto&
StructuredValue::_Internal::type_spec_value(const StructuredValue* msg) {
  return *msg->kind_.type_spec_value_;
}
const ::tensorflow::ListValue&
StructuredValue::_Internal::list_value(const StructuredValue* msg) {
  return *msg->kind_.list_value_;
}
const ::tensorflow::TupleValue&
StructuredValue::_Internal::tuple_value(const StructuredValue* msg) {
  return *msg->kind_.tuple_value_;
}
const ::tensorflow::DictValue&
StructuredValue::_Internal::dict_value(const StructuredValue* msg) {
  return *msg->kind_.dict_value_;
}
const ::tensorflow::NamedTupleValue&
StructuredValue::_Internal::named_tuple_value(const StructuredValue* msg) {
  return *msg->kind_.named_tuple_value_;
}
void StructuredValue::set_allocated_none_value(::tensorflow::NoneValue* none_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (none_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      none_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none_value, submessage_arena);
    }
    set_has_none_value();
    kind_.none_value_ = none_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.none_value)
}
void StructuredValue::set_allocated_tensor_shape_value(::tensorflow::TensorShapeProto* tensor_shape_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (tensor_shape_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape_value)->GetArena();
    if (message_arena != submessage_arena) {
      tensor_shape_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape_value, submessage_arena);
    }
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = tensor_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_shape_value)
}
void StructuredValue::clear_tensor_shape_value() {
  if (_internal_has_tensor_shape_value()) {
    delete kind_.tensor_shape_value_;
    clear_has_kind();
  }
}
void StructuredValue::set_allocated_tensor_spec_value(::tensorflow::TensorSpecProto* tensor_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (tensor_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tensor_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_spec_value, submessage_arena);
    }
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_spec_value)
}
void StructuredValue::set_allocated_type_spec_value(::tensorflow::TypeSpecProto* type_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (type_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec_value, submessage_arena);
    }
    set_has_type_spec_value();
    kind_.type_spec_value_ = type_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.type_spec_value)
}
void StructuredValue::set_allocated_list_value(::tensorflow::ListValue* list_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (list_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value, submessage_arena);
    }
    set_has_list_value();
    kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.list_value)
}
void StructuredValue::set_allocated_tuple_value(::tensorflow::TupleValue* tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple_value, submessage_arena);
    }
    set_has_tuple_value();
    kind_.tuple_value_ = tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tuple_value)
}
void StructuredValue::set_allocated_dict_value(::tensorflow::DictValue* dict_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (dict_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dict_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict_value, submessage_arena);
    }
    set_has_dict_value();
    kind_.dict_value_ = dict_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.dict_value)
}
void StructuredValue::set_allocated_named_tuple_value(::tensorflow::NamedTupleValue* named_tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (named_tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      named_tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_tuple_value, submessage_arena);
    }
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = named_tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.named_tuple_value)
}
StructuredValue::StructuredValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StructuredValue)
}
StructuredValue::StructuredValue(const StructuredValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNoneValue: {
      _internal_mutable_none_value()->::tensorflow::NoneValue::MergeFrom(from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _internal_mutable_tensor_shape_value()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _internal_mutable_tensor_spec_value()->::tensorflow::TensorSpecProto::MergeFrom(from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _internal_mutable_type_spec_value()->::tensorflow::TypeSpecProto::MergeFrom(from._internal_type_spec_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::tensorflow::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _internal_mutable_tuple_value()->::tensorflow::TupleValue::MergeFrom(from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _internal_mutable_dict_value()->::tensorflow::DictValue::MergeFrom(from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _internal_mutable_named_tuple_value()->::tensorflow::NamedTupleValue::MergeFrom(from._internal_named_tuple_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.StructuredValue)
}

void StructuredValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  clear_has_kind();
}

StructuredValue::~StructuredValue() {
  // @@protoc_insertion_point(destructor:tensorflow.StructuredValue)
  SharedDtor();
}

void StructuredValue::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void StructuredValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StructuredValue& StructuredValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void StructuredValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.StructuredValue)
  switch (kind_case()) {
    case kNoneValue: {
      delete kind_.none_value_;
      break;
    }
    case kFloat64Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      kind_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kTensorShapeValue: {
      delete kind_.tensor_shape_value_;
      break;
    }
    case kTensorDtypeValue: {
      // No need to clear
      break;
    }
    case kTensorSpecValue: {
      delete kind_.tensor_spec_value_;
      break;
    }
    case kTypeSpecValue: {
      delete kind_.type_spec_value_;
      break;
    }
    case kListValue: {
      delete kind_.list_value_;
      break;
    }
    case kTupleValue: {
      delete kind_.tuple_value_;
      break;
    }
    case kDictValue: {
      delete kind_.dict_value_;
      break;
    }
    case kNamedTupleValue: {
      delete kind_.named_tuple_value_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void StructuredValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StructuredValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

const char* StructuredValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.NoneValue none_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_none_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double float64_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_float64_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // sint64 int64_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.StructuredValue.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto tensor_shape_value = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType tensor_dtype_value = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_tensor_dtype_value(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorSpecProto tensor_spec_value = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_spec_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TypeSpecProto type_spec_value = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ListValue list_value = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TupleValue tuple_value = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DictValue dict_value = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dict_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.NamedTupleValue named_tuple_value = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_tuple_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructuredValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StructuredValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.NoneValue none_value = 1;
  if (_internal_has_none_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::none_value(this), target, stream);
  }

  // double float64_value = 11;
  if (_internal_has_float64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_float64_value(), target);
  }

  // sint64 int64_value = 12;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(12, this->_internal_int64_value(), target);
  }

  // string string_value = 13;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StructuredValue.string_value");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_string_value(), target);
  }

  // bool bool_value = 14;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_bool_value(), target);
  }

  // .tensorflow.TensorShapeProto tensor_shape_value = 31;
  if (_internal_has_tensor_shape_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::tensor_shape_value(this), target, stream);
  }

  // .tensorflow.DataType tensor_dtype_value = 32;
  if (_internal_has_tensor_dtype_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      32, this->_internal_tensor_dtype_value(), target);
  }

  // .tensorflow.TensorSpecProto tensor_spec_value = 33;
  if (_internal_has_tensor_spec_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::tensor_spec_value(this), target, stream);
  }

  // .tensorflow.TypeSpecProto type_spec_value = 34;
  if (_internal_has_type_spec_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::type_spec_value(this), target, stream);
  }

  // .tensorflow.ListValue list_value = 51;
  if (_internal_has_list_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::list_value(this), target, stream);
  }

  // .tensorflow.TupleValue tuple_value = 52;
  if (_internal_has_tuple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::tuple_value(this), target, stream);
  }

  // .tensorflow.DictValue dict_value = 53;
  if (_internal_has_dict_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::dict_value(this), target, stream);
  }

  // .tensorflow.NamedTupleValue named_tuple_value = 54;
  if (_internal_has_named_tuple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::named_tuple_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StructuredValue)
  return target;
}

size_t StructuredValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StructuredValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .tensorflow.NoneValue none_value = 1;
    case kNoneValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.none_value_);
      break;
    }
    // double float64_value = 11;
    case kFloat64Value: {
      total_size += 1 + 8;
      break;
    }
    // sint64 int64_value = 12;
    case kInt64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_int64_value());
      break;
    }
    // string string_value = 13;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 14;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .tensorflow.TensorShapeProto tensor_shape_value = 31;
    case kTensorShapeValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tensor_shape_value_);
      break;
    }
    // .tensorflow.DataType tensor_dtype_value = 32;
    case kTensorDtypeValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tensor_dtype_value());
      break;
    }
    // .tensorflow.TensorSpecProto tensor_spec_value = 33;
    case kTensorSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tensor_spec_value_);
      break;
    }
    // .tensorflow.TypeSpecProto type_spec_value = 34;
    case kTypeSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.type_spec_value_);
      break;
    }
    // .tensorflow.ListValue list_value = 51;
    case kListValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_value_);
      break;
    }
    // .tensorflow.TupleValue tuple_value = 52;
    case kTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tuple_value_);
      break;
    }
    // .tensorflow.DictValue dict_value = 53;
    case kDictValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.dict_value_);
      break;
    }
    // .tensorflow.NamedTupleValue named_tuple_value = 54;
    case kNamedTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.named_tuple_value_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StructuredValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StructuredValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StructuredValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StructuredValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StructuredValue)
    MergeFrom(*source);
  }
}

void StructuredValue::MergeFrom(const StructuredValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StructuredValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNoneValue: {
      _internal_mutable_none_value()->::tensorflow::NoneValue::MergeFrom(from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _internal_mutable_tensor_shape_value()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _internal_mutable_tensor_spec_value()->::tensorflow::TensorSpecProto::MergeFrom(from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _internal_mutable_type_spec_value()->::tensorflow::TypeSpecProto::MergeFrom(from._internal_type_spec_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::tensorflow::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _internal_mutable_tuple_value()->::tensorflow::TupleValue::MergeFrom(from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _internal_mutable_dict_value()->::tensorflow::DictValue::MergeFrom(from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _internal_mutable_named_tuple_value()->::tensorflow::NamedTupleValue::MergeFrom(from._internal_named_tuple_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void StructuredValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StructuredValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructuredValue::CopyFrom(const StructuredValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StructuredValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredValue::IsInitialized() const {
  return true;
}

void StructuredValue::InternalSwap(StructuredValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoneValue::InitAsDefaultInstance() {
}
class NoneValue::_Internal {
 public:
};

NoneValue::NoneValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NoneValue)
}
NoneValue::NoneValue(const NoneValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NoneValue)
}

void NoneValue::SharedCtor() {
}

NoneValue::~NoneValue() {
  // @@protoc_insertion_point(destructor:tensorflow.NoneValue)
  SharedDtor();
}

void NoneValue::SharedDtor() {
}

void NoneValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoneValue& NoneValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoneValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void NoneValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NoneValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* NoneValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoneValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NoneValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NoneValue)
  return target;
}

size_t NoneValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NoneValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoneValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NoneValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NoneValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoneValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NoneValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NoneValue)
    MergeFrom(*source);
  }
}

void NoneValue::MergeFrom(const NoneValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NoneValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoneValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NoneValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoneValue::CopyFrom(const NoneValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NoneValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoneValue::IsInitialized() const {
  return true;
}

void NoneValue::InternalSwap(NoneValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoneValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListValue::InitAsDefaultInstance() {
}
class ListValue::_Internal {
 public:
};

ListValue::ListValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ListValue)
}
ListValue::ListValue(const ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListValue)
}

void ListValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
}

ListValue::~ListValue() {
  // @@protoc_insertion_point(destructor:tensorflow.ListValue)
  SharedDtor();
}

void ListValue::SharedDtor() {
}

void ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValue& ListValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* ListValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListValue)
  return target;
}

size_t ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ListValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ListValue)
    MergeFrom(*source);
  }
}

void ListValue::MergeFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValue::CopyFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValue::IsInitialized() const {
  return true;
}

void ListValue::InternalSwap(ListValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TupleValue::InitAsDefaultInstance() {
}
class TupleValue::_Internal {
 public:
};

TupleValue::TupleValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TupleValue)
}
TupleValue::TupleValue(const TupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TupleValue)
}

void TupleValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
}

TupleValue::~TupleValue() {
  // @@protoc_insertion_point(destructor:tensorflow.TupleValue)
  SharedDtor();
}

void TupleValue::SharedDtor() {
}

void TupleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TupleValue& TupleValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void TupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* TupleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TupleValue)
  return target;
}

size_t TupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TupleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TupleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TupleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TupleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TupleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TupleValue)
    MergeFrom(*source);
  }
}

void TupleValue::MergeFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TupleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleValue::CopyFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleValue::IsInitialized() const {
  return true;
}

void TupleValue::InternalSwap(TupleValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse() {}
DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DictValue_FieldsEntry_DoNotUse::MergeFrom(const DictValue_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DictValue_FieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DictValue_FieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DictValue::InitAsDefaultInstance() {
}
class DictValue::_Internal {
 public:
};

DictValue::DictValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DictValue)
}
DictValue::DictValue(const DictValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DictValue)
}

void DictValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
}

DictValue::~DictValue() {
  // @@protoc_insertion_point(destructor:tensorflow.DictValue)
  SharedDtor();
}

void DictValue::SharedDtor() {
}

void DictValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DictValue& DictValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void DictValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DictValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

const char* DictValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.StructuredValue> fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DictValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.StructuredValue> fields = 1;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.DictValue.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DictValue_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = DictValue_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DictValue)
  return target;
}

size_t DictValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DictValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.StructuredValue> fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += DictValue_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DictValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DictValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DictValue)
    MergeFrom(*source);
  }
}

void DictValue::MergeFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void DictValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictValue::CopyFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictValue::IsInitialized() const {
  return true;
}

void DictValue::InternalSwap(DictValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.Swap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PairValue::InitAsDefaultInstance() {
  ::tensorflow::_PairValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::tensorflow::StructuredValue*>(
      ::tensorflow::StructuredValue::internal_default_instance());
}
class PairValue::_Internal {
 public:
  static const ::tensorflow::StructuredValue& value(const PairValue* msg);
};

const ::tensorflow::StructuredValue&
PairValue::_Internal::value(const PairValue* msg) {
  return *msg->value_;
}
PairValue::PairValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PairValue)
}
PairValue::PairValue(const PairValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_value()) {
    value_ = new ::tensorflow::StructuredValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PairValue)
}

void PairValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

PairValue::~PairValue() {
  // @@protoc_insertion_point(destructor:tensorflow.PairValue)
  SharedDtor();
}

void PairValue::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void PairValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairValue& PairValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void PairValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PairValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PairValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.PairValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.StructuredValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PairValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PairValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .tensorflow.StructuredValue value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PairValue)
  return target;
}

size_t PairValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PairValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .tensorflow.StructuredValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PairValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PairValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PairValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PairValue)
    MergeFrom(*source);
  }
}

void PairValue::MergeFrom(const PairValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PairValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    _internal_mutable_value()->::tensorflow::StructuredValue::MergeFrom(from._internal_value());
  }
}

void PairValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PairValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairValue::CopyFrom(const PairValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PairValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValue::IsInitialized() const {
  return true;
}

void PairValue::InternalSwap(PairValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedTupleValue::InitAsDefaultInstance() {
}
class NamedTupleValue::_Internal {
 public:
};

NamedTupleValue::NamedTupleValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NamedTupleValue)
}
NamedTupleValue::NamedTupleValue(const NamedTupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NamedTupleValue)
}

void NamedTupleValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedTupleValue::~NamedTupleValue() {
  // @@protoc_insertion_point(destructor:tensorflow.NamedTupleValue)
  SharedDtor();
}

void NamedTupleValue::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedTupleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedTupleValue& NamedTupleValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void NamedTupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NamedTupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NamedTupleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.NamedTupleValue.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.PairValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedTupleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NamedTupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NamedTupleValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .tensorflow.PairValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NamedTupleValue)
  return target;
}

size_t NamedTupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NamedTupleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.PairValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedTupleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NamedTupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedTupleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedTupleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NamedTupleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NamedTupleValue)
    MergeFrom(*source);
  }
}

void NamedTupleValue::MergeFrom(const NamedTupleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NamedTupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamedTupleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NamedTupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedTupleValue::CopyFrom(const NamedTupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NamedTupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedTupleValue::IsInitialized() const {
  return true;
}

void NamedTupleValue::InternalSwap(NamedTupleValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedTupleValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorSpecProto::InitAsDefaultInstance() {
  ::tensorflow::_TensorSpecProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class TensorSpecProto::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const TensorSpecProto* msg);
};

const ::tensorflow::TensorShapeProto&
TensorSpecProto::_Internal::shape(const TensorSpecProto* msg) {
  return *msg->shape_;
}
void TensorSpecProto::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
TensorSpecProto::TensorSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorSpecProto)
}
TensorSpecProto::TensorSpecProto(const TensorSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorSpecProto)
}

void TensorSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

TensorSpecProto::~TensorSpecProto() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorSpecProto)
  SharedDtor();
}

void TensorSpecProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void TensorSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorSpecProto& TensorSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorSpecProto_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void TensorSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

const char* TensorSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.TensorSpecProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorSpecProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorSpecProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorSpecProto)
  return target;
}

size_t TensorSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorSpecProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorSpecProto)
    MergeFrom(*source);
  }
}

void TensorSpecProto::MergeFrom(const TensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void TensorSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorSpecProto::CopyFrom(const TensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorSpecProto::IsInitialized() const {
  return true;
}

void TensorSpecProto::InternalSwap(TensorSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TypeSpecProto::InitAsDefaultInstance() {
  ::tensorflow::_TypeSpecProto_default_instance_._instance.get_mutable()->type_state_ = const_cast< ::tensorflow::StructuredValue*>(
      ::tensorflow::StructuredValue::internal_default_instance());
}
class TypeSpecProto::_Internal {
 public:
  static const ::tensorflow::StructuredValue& type_state(const TypeSpecProto* msg);
};

const ::tensorflow::StructuredValue&
TypeSpecProto::_Internal::type_state(const TypeSpecProto* msg) {
  return *msg->type_state_;
}
TypeSpecProto::TypeSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TypeSpecProto)
}
TypeSpecProto::TypeSpecProto(const TypeSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_spec_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_spec_class_name().empty()) {
    type_spec_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_spec_class_name_);
  }
  if (from._internal_has_type_state()) {
    type_state_ = new ::tensorflow::StructuredValue(*from.type_state_);
  } else {
    type_state_ = nullptr;
  }
  type_spec_class_ = from.type_spec_class_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TypeSpecProto)
}

void TypeSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  type_spec_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_spec_class_) -
      reinterpret_cast<char*>(&type_state_)) + sizeof(type_spec_class_));
}

TypeSpecProto::~TypeSpecProto() {
  // @@protoc_insertion_point(destructor:tensorflow.TypeSpecProto)
  SharedDtor();
}

void TypeSpecProto::SharedDtor() {
  type_spec_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_state_;
}

void TypeSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypeSpecProto& TypeSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void TypeSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TypeSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_spec_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_state_ != nullptr) {
    delete type_state_;
  }
  type_state_ = nullptr;
  type_spec_class_ = 0;
  _internal_metadata_.Clear();
}

const char* TypeSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type_spec_class(static_cast<::tensorflow::TypeSpecProto_TypeSpecClass>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.StructuredValue type_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_spec_class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type_spec_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.TypeSpecProto.type_spec_class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeSpecProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TypeSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->type_spec_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_spec_class(), target);
  }

  // .tensorflow.StructuredValue type_state = 2;
  if (this->has_type_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_state(this), target, stream);
  }

  // string type_spec_class_name = 3;
  if (this->type_spec_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_spec_class_name().data(), static_cast<int>(this->_internal_type_spec_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TypeSpecProto.type_spec_class_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_spec_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TypeSpecProto)
  return target;
}

size_t TypeSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TypeSpecProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_spec_class_name = 3;
  if (this->type_spec_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_spec_class_name());
  }

  // .tensorflow.StructuredValue type_state = 2;
  if (this->has_type_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_state_);
  }

  // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->type_spec_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_spec_class());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TypeSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypeSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TypeSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TypeSpecProto)
    MergeFrom(*source);
  }
}

void TypeSpecProto::MergeFrom(const TypeSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TypeSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_spec_class_name().size() > 0) {

    type_spec_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_spec_class_name_);
  }
  if (from.has_type_state()) {
    _internal_mutable_type_state()->::tensorflow::StructuredValue::MergeFrom(from._internal_type_state());
  }
  if (from.type_spec_class() != 0) {
    _internal_set_type_spec_class(from._internal_type_spec_class());
  }
}

void TypeSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TypeSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeSpecProto::CopyFrom(const TypeSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TypeSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeSpecProto::IsInitialized() const {
  return true;
}

void TypeSpecProto::InternalSwap(TypeSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_spec_class_name_.Swap(&other->type_spec_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_state_, other->type_state_);
  swap(type_spec_class_, other->type_spec_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::StructuredValue* Arena::CreateMaybeMessage< ::tensorflow::StructuredValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::StructuredValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NoneValue* Arena::CreateMaybeMessage< ::tensorflow::NoneValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::NoneValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ListValue* Arena::CreateMaybeMessage< ::tensorflow::ListValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TupleValue* Arena::CreateMaybeMessage< ::tensorflow::TupleValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DictValue_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::DictValue_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::DictValue_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DictValue* Arena::CreateMaybeMessage< ::tensorflow::DictValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::DictValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PairValue* Arena::CreateMaybeMessage< ::tensorflow::PairValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::PairValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NamedTupleValue* Arena::CreateMaybeMessage< ::tensorflow::NamedTupleValue >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::NamedTupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TensorSpecProto* Arena::CreateMaybeMessage< ::tensorflow::TensorSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TypeSpecProto* Arena::CreateMaybeMessage< ::tensorflow::TypeSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TypeSpecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
