// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/classification.proto

#include "tensorflow_serving/apis/classification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fclassification_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fclassification_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fclassification_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Input_tensorflow_5fserving_2fapis_2finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto;
namespace tensorflow {
namespace serving {
class ClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Class> _instance;
} _Class_default_instance_;
class ClassificationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Classifications> _instance;
} _Classifications_default_instance_;
class ClassificationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationResult> _instance;
} _ClassificationResult_default_instance_;
class ClassificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationRequest> _instance;
} _ClassificationRequest_default_instance_;
class ClassificationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationResponse> _instance;
} _ClassificationResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static void InitDefaultsscc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_Class_default_instance_;
    new (ptr) ::tensorflow::serving::Class();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::Class::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ClassificationRequest_default_instance_;
    new (ptr) ::tensorflow::serving::ClassificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ClassificationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto}, {
      &scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto.base,
      &scc_info_Input_tensorflow_5fserving_2fapis_2finput_2eproto.base,}};

static void InitDefaultsscc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ClassificationResponse_default_instance_;
    new (ptr) ::tensorflow::serving::ClassificationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ClassificationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto}, {
      &scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto.base,
      &scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,}};

static void InitDefaultsscc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ClassificationResult_default_instance_;
    new (ptr) ::tensorflow::serving::ClassificationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ClassificationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto}, {
      &scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,}};

static void InitDefaultsscc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_Classifications_default_instance_;
    new (ptr) ::tensorflow::serving::Classifications();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::Classifications::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto}, {
      &scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_5fserving_2fapis_2fclassification_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fclassification_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fapis_2fclassification_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Class, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Class, label_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Class, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Classifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::Classifications, classes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationResult, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationRequest, model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationRequest, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationResponse, model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ClassificationResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::serving::Class)},
  { 7, -1, sizeof(::tensorflow::serving::Classifications)},
  { 13, -1, sizeof(::tensorflow::serving::ClassificationResult)},
  { 19, -1, sizeof(::tensorflow::serving::ClassificationRequest)},
  { 26, -1, sizeof(::tensorflow::serving::ClassificationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_Class_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_Classifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ClassificationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ClassificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ClassificationResponse_default_instance_),
};

const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2fclassification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,tensorflow_serving/apis/classification"
  ".proto\022\022tensorflow.serving\032#tensorflow_s"
  "erving/apis/input.proto\032#tensorflow_serv"
  "ing/apis/model.proto\"%\n\005Class\022\r\n\005label\030\001"
  " \001(\t\022\r\n\005score\030\002 \001(\002\"=\n\017Classifications\022*"
  "\n\007classes\030\001 \003(\0132\031.tensorflow.serving.Cla"
  "ss\"T\n\024ClassificationResult\022<\n\017classifica"
  "tions\030\001 \003(\0132#.tensorflow.serving.Classif"
  "ications\"t\n\025ClassificationRequest\0221\n\nmod"
  "el_spec\030\001 \001(\0132\035.tensorflow.serving.Model"
  "Spec\022(\n\005input\030\002 \001(\0132\031.tensorflow.serving"
  ".Input\"\205\001\n\026ClassificationResponse\0221\n\nmod"
  "el_spec\030\002 \001(\0132\035.tensorflow.serving.Model"
  "Spec\0228\n\006result\030\001 \001(\0132(.tensorflow.servin"
  "g.ClassificationResultB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_5fserving_2fapis_2finput_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_sccs[5] = {
  &scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,
  &scc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,
  &scc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,
  &scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,
  &scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_once;
static bool descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto = {
  &descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_initialized, descriptor_table_protodef_tensorflow_5fserving_2fapis_2fclassification_2eproto, "tensorflow_serving/apis/classification.proto", 595,
  &descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_once, descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_sccs, descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto::offsets,
  file_level_metadata_tensorflow_5fserving_2fapis_2fclassification_2eproto, 5, file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fclassification_2eproto, file_level_service_descriptors_tensorflow_5fserving_2fapis_2fclassification_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_5fserving_2fapis_2fclassification_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto), true);
namespace tensorflow {
namespace serving {

// ===================================================================

void Class::InitAsDefaultInstance() {
}
class Class::_Internal {
 public:
};

Class::Class()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Class)
}
Class::Class(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.Class)
}
Class::Class(const Class& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArenaNoVirtual());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Class)
}

void Class::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

Class::~Class() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Class)
  SharedDtor();
}

void Class::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Class::ArenaDtor(void* object) {
  Class* _this = reinterpret_cast< Class* >(object);
  (void)_this;
}
void Class::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Class::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Class& Class::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Class_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void Class::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  score_ = 0;
  _internal_metadata_.Clear();
}

const char* Class::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.Class.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Class::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.Class.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Class)
  return target;
}

size_t Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Class)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Class::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Class)
  GOOGLE_DCHECK_NE(&from, this);
  const Class* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Class>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Class)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Class)
    MergeFrom(*source);
  }
}

void Class::MergeFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Class)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void Class::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Class::CopyFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Class::IsInitialized() const {
  return true;
}

void Class::InternalSwap(Class* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Class::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Classifications::InitAsDefaultInstance() {
}
class Classifications::_Internal {
 public:
};

Classifications::Classifications()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Classifications)
}
Classifications::Classifications(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  classes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.Classifications)
}
Classifications::Classifications(const Classifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Classifications)
}

void Classifications::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
}

Classifications::~Classifications() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Classifications)
  SharedDtor();
}

void Classifications::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Classifications::ArenaDtor(void* object) {
  Classifications* _this = reinterpret_cast< Classifications* >(object);
  (void)_this;
}
void Classifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Classifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Classifications& Classifications::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Classifications_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void Classifications::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Classifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  _internal_metadata_.Clear();
}

const char* Classifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.serving.Class classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Classifications::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Classifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.serving.Class classes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_classes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Classifications)
  return target;
}

size_t Classifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Classifications)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.Class classes = 1;
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Classifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Classifications)
  GOOGLE_DCHECK_NE(&from, this);
  const Classifications* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Classifications>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Classifications)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Classifications)
    MergeFrom(*source);
  }
}

void Classifications::MergeFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Classifications)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
}

void Classifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Classifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Classifications::CopyFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Classifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classifications::IsInitialized() const {
  return true;
}

void Classifications::InternalSwap(Classifications* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Classifications::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationResult::InitAsDefaultInstance() {
}
class ClassificationResult::_Internal {
 public:
};

ClassificationResult::ClassificationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationResult)
}
ClassificationResult::ClassificationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  classifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationResult)
}
ClassificationResult::ClassificationResult(const ClassificationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationResult)
}

void ClassificationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
}

ClassificationResult::~ClassificationResult() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationResult)
  SharedDtor();
}

void ClassificationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ClassificationResult::ArenaDtor(void* object) {
  ClassificationResult* _this = reinterpret_cast< ClassificationResult* >(object);
  (void)_this;
}
void ClassificationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassificationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationResult& ClassificationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationResult_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void ClassificationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear();
}

const char* ClassificationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.serving.Classifications classifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.serving.Classifications classifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_classifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationResult)
  return target;
}

size_t ClassificationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.Classifications classifications = 1;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationResult)
    MergeFrom(*source);
  }
}

void ClassificationResult::MergeFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
}

void ClassificationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationResult::CopyFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationResult::IsInitialized() const {
  return true;
}

void ClassificationResult::InternalSwap(ClassificationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationRequest::InitAsDefaultInstance() {
  ::tensorflow::serving::_ClassificationRequest_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
  ::tensorflow::serving::_ClassificationRequest_default_instance_._instance.get_mutable()->input_ = const_cast< ::tensorflow::serving::Input*>(
      ::tensorflow::serving::Input::internal_default_instance());
}
class ClassificationRequest::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const ClassificationRequest* msg);
  static const ::tensorflow::serving::Input& input(const ClassificationRequest* msg);
};

const ::tensorflow::serving::ModelSpec&
ClassificationRequest::_Internal::model_spec(const ClassificationRequest* msg) {
  return *msg->model_spec_;
}
const ::tensorflow::serving::Input&
ClassificationRequest::_Internal::input(const ClassificationRequest* msg) {
  return *msg->input_;
}
void ClassificationRequest::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}
void ClassificationRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
void ClassificationRequest::unsafe_arena_set_allocated_input(
    ::tensorflow::serving::Input* input) {
  if (GetArenaNoVirtual() == nullptr) {
    delete input_;
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.input)
}
void ClassificationRequest::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
ClassificationRequest::ClassificationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationRequest)
}
ClassificationRequest::ClassificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationRequest)
}
ClassificationRequest::ClassificationRequest(const ClassificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::tensorflow::serving::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationRequest)
}

void ClassificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  ::memset(&model_spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_) -
      reinterpret_cast<char*>(&model_spec_)) + sizeof(input_));
}

ClassificationRequest::~ClassificationRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationRequest)
  SharedDtor();
}

void ClassificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
  if (this != internal_default_instance()) delete input_;
}

void ClassificationRequest::ArenaDtor(void* object) {
  ClassificationRequest* _this = reinterpret_cast< ClassificationRequest* >(object);
  (void)_this;
}
void ClassificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationRequest& ClassificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationRequest_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void ClassificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ClassificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_spec(this), target, stream);
  }

  // .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationRequest)
  return target;
}

size_t ClassificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  // .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationRequest)
    MergeFrom(*source);
  }
}

void ClassificationRequest::MergeFrom(const ClassificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model_spec()) {
    _internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from._internal_model_spec());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::tensorflow::serving::Input::MergeFrom(from._internal_input());
  }
}

void ClassificationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationRequest::CopyFrom(const ClassificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationRequest::IsInitialized() const {
  return true;
}

void ClassificationRequest::InternalSwap(ClassificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(model_spec_, other->model_spec_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationResponse::InitAsDefaultInstance() {
  ::tensorflow::serving::_ClassificationResponse_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
  ::tensorflow::serving::_ClassificationResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::tensorflow::serving::ClassificationResult*>(
      ::tensorflow::serving::ClassificationResult::internal_default_instance());
}
class ClassificationResponse::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const ClassificationResponse* msg);
  static const ::tensorflow::serving::ClassificationResult& result(const ClassificationResponse* msg);
};

const ::tensorflow::serving::ModelSpec&
ClassificationResponse::_Internal::model_spec(const ClassificationResponse* msg) {
  return *msg->model_spec_;
}
const ::tensorflow::serving::ClassificationResult&
ClassificationResponse::_Internal::result(const ClassificationResponse* msg) {
  return *msg->result_;
}
void ClassificationResponse::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}
void ClassificationResponse::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
void ClassificationResponse::unsafe_arena_set_allocated_result(
    ::tensorflow::serving::ClassificationResult* result) {
  if (GetArenaNoVirtual() == nullptr) {
    delete result_;
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.result)
}
ClassificationResponse::ClassificationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationResponse)
}
ClassificationResponse::ClassificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationResponse)
}
ClassificationResponse::ClassificationResponse(const ClassificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::tensorflow::serving::ClassificationResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationResponse)
}

void ClassificationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_spec_) -
      reinterpret_cast<char*>(&result_)) + sizeof(model_spec_));
}

ClassificationResponse::~ClassificationResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationResponse)
  SharedDtor();
}

void ClassificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete model_spec_;
}

void ClassificationResponse::ArenaDtor(void* object) {
  ClassificationResponse* _this = reinterpret_cast< ClassificationResponse* >(object);
  (void)_this;
}
void ClassificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationResponse& ClassificationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationResponse_tensorflow_5fserving_2fapis_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void ClassificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ClassificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.ClassificationResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.ModelSpec model_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ClassificationResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .tensorflow.serving.ModelSpec model_spec = 2;
  if (this->has_model_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationResponse)
  return target;
}

size_t ClassificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.serving.ClassificationResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .tensorflow.serving.ModelSpec model_spec = 2;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationResponse)
    MergeFrom(*source);
  }
}

void ClassificationResponse::MergeFrom(const ClassificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::tensorflow::serving::ClassificationResult::MergeFrom(from._internal_result());
  }
  if (from.has_model_spec()) {
    _internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from._internal_model_spec());
  }
}

void ClassificationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationResponse::CopyFrom(const ClassificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationResponse::IsInitialized() const {
  return true;
}

void ClassificationResponse::InternalSwap(ClassificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(model_spec_, other->model_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::Class* Arena::CreateMaybeMessage< ::tensorflow::serving::Class >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::Class >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::Classifications* Arena::CreateMaybeMessage< ::tensorflow::serving::Classifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::Classifications >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ClassificationResult* Arena::CreateMaybeMessage< ::tensorflow::serving::ClassificationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ClassificationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ClassificationRequest* Arena::CreateMaybeMessage< ::tensorflow::serving::ClassificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ClassificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ClassificationResponse* Arena::CreateMaybeMessage< ::tensorflow::serving::ClassificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ClassificationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
