// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/get_model_metadata.proto

#include "tensorflow_serving/apis/get_model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
namespace tensorflow {
namespace serving {
class SignatureDefMap_SignatureDefEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDefMap_SignatureDefEntry_DoNotUse> _instance;
} _SignatureDefMap_SignatureDefEntry_DoNotUse_default_instance_;
class SignatureDefMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDefMap> _instance;
} _SignatureDefMap_default_instance_;
class GetModelMetadataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetadataRequest> _instance;
} _GetModelMetadataRequest_default_instance_;
class GetModelMetadataResponse_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetadataResponse_MetadataEntry_DoNotUse> _instance;
} _GetModelMetadataResponse_MetadataEntry_DoNotUse_default_instance_;
class GetModelMetadataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetadataResponse> _instance;
} _GetModelMetadataResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static void InitDefaultsscc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_GetModelMetadataRequest_default_instance_;
    new (ptr) ::tensorflow::serving::GetModelMetadataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::GetModelMetadataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto}, {
      &scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_GetModelMetadataResponse_default_instance_;
    new (ptr) ::tensorflow::serving::GetModelMetadataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::GetModelMetadataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto}, {
      &scc_info_ModelSpec_tensorflow_5fserving_2fapis_2fmodel_2eproto.base,
      &scc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_GetModelMetadataResponse_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse();
  }
  ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_SignatureDefMap_default_instance_;
    new (ptr) ::tensorflow::serving::SignatureDefMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::SignatureDefMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto}, {
      &scc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_SignatureDefMap_SignatureDefEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse();
  }
  ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto}, {
      &scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SignatureDefMap, signature_def_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataRequest, model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataRequest, metadata_field_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse, model_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::GetModelMetadataResponse, metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse)},
  { 9, -1, sizeof(::tensorflow::serving::SignatureDefMap)},
  { 15, -1, sizeof(::tensorflow::serving::GetModelMetadataRequest)},
  { 22, 29, sizeof(::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse)},
  { 31, -1, sizeof(::tensorflow::serving::GetModelMetadataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_SignatureDefMap_SignatureDefEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_SignatureDefMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_GetModelMetadataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_GetModelMetadataResponse_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_GetModelMetadataResponse_default_instance_),
};

const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow_serving/apis/get_model_meta"
  "data.proto\022\022tensorflow.serving\032\031google/p"
  "rotobuf/any.proto\032)tensorflow/core/proto"
  "buf/meta_graph.proto\032#tensorflow_serving"
  "/apis/model.proto\"\256\001\n\017SignatureDefMap\022L\n"
  "\rsignature_def\030\001 \003(\01325.tensorflow.servin"
  "g.SignatureDefMap.SignatureDefEntry\032M\n\021S"
  "ignatureDefEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002"
  " \001(\0132\030.tensorflow.SignatureDef:\0028\001\"d\n\027Ge"
  "tModelMetadataRequest\0221\n\nmodel_spec\030\001 \001("
  "\0132\035.tensorflow.serving.ModelSpec\022\026\n\016meta"
  "data_field\030\002 \003(\t\"\342\001\n\030GetModelMetadataRes"
  "ponse\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorflow.s"
  "erving.ModelSpec\022L\n\010metadata\030\002 \003(\0132:.ten"
  "sorflow.serving.GetModelMetadataResponse"
  ".MetadataEntry\032E\n\rMetadataEntry\022\013\n\003key\030\001"
  " \001(\t\022#\n\005value\030\002 \001(\0132\024.google.protobuf.An"
  "y:\0028\001B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_sccs[5] = {
  &scc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,
  &scc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,
  &scc_info_GetModelMetadataResponse_MetadataEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,
  &scc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,
  &scc_info_SignatureDefMap_SignatureDefEntry_DoNotUse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_once;
static bool descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto = {
  &descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_initialized, descriptor_table_protodef_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto, "tensorflow_serving/apis/get_model_metadata.proto", 698,
  &descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_once, descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_sccs, descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto::offsets,
  file_level_metadata_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto, 5, file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto, file_level_service_descriptors_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto), true);
namespace tensorflow {
namespace serving {

// ===================================================================

SignatureDefMap_SignatureDefEntry_DoNotUse::SignatureDefMap_SignatureDefEntry_DoNotUse() {}
SignatureDefMap_SignatureDefEntry_DoNotUse::SignatureDefMap_SignatureDefEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SignatureDefMap_SignatureDefEntry_DoNotUse::MergeFrom(const SignatureDefMap_SignatureDefEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SignatureDefMap_SignatureDefEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SignatureDefMap_SignatureDefEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SignatureDefMap::InitAsDefaultInstance() {
}
class SignatureDefMap::_Internal {
 public:
};

void SignatureDefMap::clear_signature_def() {
  signature_def_.Clear();
}
SignatureDefMap::SignatureDefMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.SignatureDefMap)
}
SignatureDefMap::SignatureDefMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  signature_def_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SignatureDefMap)
}
SignatureDefMap::SignatureDefMap(const SignatureDefMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_def_.MergeFrom(from.signature_def_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SignatureDefMap)
}

void SignatureDefMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
}

SignatureDefMap::~SignatureDefMap() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SignatureDefMap)
  SharedDtor();
}

void SignatureDefMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SignatureDefMap::ArenaDtor(void* object) {
  SignatureDefMap* _this = reinterpret_cast< SignatureDefMap* >(object);
  (void)_this;
}
void SignatureDefMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDefMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDefMap& SignatureDefMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDefMap_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void SignatureDefMap::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SignatureDefMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_def_.Clear();
  _internal_metadata_.Clear();
}

const char* SignatureDefMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.SignatureDef> signature_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signature_def_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDefMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SignatureDefMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.SignatureDef> signature_def = 1;
  if (!this->_internal_signature_def().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.SignatureDefMap.SignatureDefEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_signature_def().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_signature_def().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->_internal_signature_def().begin();
          it != this->_internal_signature_def().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SignatureDefMap_SignatureDefEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->_internal_signature_def().begin();
          it != this->_internal_signature_def().end(); ++it) {
        target = SignatureDefMap_SignatureDefEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SignatureDefMap)
  return target;
}

size_t SignatureDefMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SignatureDefMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.SignatureDef> signature_def = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signature_def_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
      it = this->_internal_signature_def().begin();
      it != this->_internal_signature_def().end(); ++it) {
    total_size += SignatureDefMap_SignatureDefEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDefMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.SignatureDefMap)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDefMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDefMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.SignatureDefMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.SignatureDefMap)
    MergeFrom(*source);
  }
}

void SignatureDefMap::MergeFrom(const SignatureDefMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SignatureDefMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_def_.MergeFrom(from.signature_def_);
}

void SignatureDefMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.SignatureDefMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDefMap::CopyFrom(const SignatureDefMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SignatureDefMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDefMap::IsInitialized() const {
  return true;
}

void SignatureDefMap::InternalSwap(SignatureDefMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_def_.Swap(&other->signature_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDefMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelMetadataRequest::InitAsDefaultInstance() {
  ::tensorflow::serving::_GetModelMetadataRequest_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
}
class GetModelMetadataRequest::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const GetModelMetadataRequest* msg);
};

const ::tensorflow::serving::ModelSpec&
GetModelMetadataRequest::_Internal::model_spec(const GetModelMetadataRequest* msg) {
  return *msg->model_spec_;
}
void GetModelMetadataRequest::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.GetModelMetadataRequest.model_spec)
}
void GetModelMetadataRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
GetModelMetadataRequest::GetModelMetadataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.GetModelMetadataRequest)
}
GetModelMetadataRequest::GetModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  metadata_field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.GetModelMetadataRequest)
}
GetModelMetadataRequest::GetModelMetadataRequest(const GetModelMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metadata_field_(from.metadata_field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.GetModelMetadataRequest)
}

void GetModelMetadataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
  model_spec_ = nullptr;
}

GetModelMetadataRequest::~GetModelMetadataRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.GetModelMetadataRequest)
  SharedDtor();
}

void GetModelMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
}

void GetModelMetadataRequest::ArenaDtor(void* object) {
  GetModelMetadataRequest* _this = reinterpret_cast< GetModelMetadataRequest* >(object);
  (void)_this;
}
void GetModelMetadataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelMetadataRequest& GetModelMetadataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelMetadataRequest_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void GetModelMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.GetModelMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_field_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelMetadataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.GetModelMetadataRequest.metadata_field"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelMetadataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.GetModelMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_spec(this), target, stream);
  }

  // repeated string metadata_field = 2;
  for (int i = 0, n = this->_internal_metadata_field_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_field(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.GetModelMetadataRequest.metadata_field");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.GetModelMetadataRequest)
  return target;
}

size_t GetModelMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.GetModelMetadataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_field_.size());
  for (int i = 0, n = metadata_field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_field_.Get(i));
  }

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelMetadataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.GetModelMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelMetadataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.GetModelMetadataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.GetModelMetadataRequest)
    MergeFrom(*source);
  }
}

void GetModelMetadataRequest::MergeFrom(const GetModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.GetModelMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_field_.MergeFrom(from.metadata_field_);
  if (from.has_model_spec()) {
    _internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from._internal_model_spec());
  }
}

void GetModelMetadataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.GetModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelMetadataRequest::CopyFrom(const GetModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.GetModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelMetadataRequest::IsInitialized() const {
  return true;
}

void GetModelMetadataRequest::InternalSwap(GetModelMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_field_.InternalSwap(&other->metadata_field_);
  swap(model_spec_, other->model_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetadataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetModelMetadataResponse_MetadataEntry_DoNotUse::GetModelMetadataResponse_MetadataEntry_DoNotUse() {}
GetModelMetadataResponse_MetadataEntry_DoNotUse::GetModelMetadataResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetModelMetadataResponse_MetadataEntry_DoNotUse::MergeFrom(const GetModelMetadataResponse_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetadataResponse_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetModelMetadataResponse_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetModelMetadataResponse::InitAsDefaultInstance() {
  ::tensorflow::serving::_GetModelMetadataResponse_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
}
class GetModelMetadataResponse::_Internal {
 public:
  static const ::tensorflow::serving::ModelSpec& model_spec(const GetModelMetadataResponse* msg);
};

const ::tensorflow::serving::ModelSpec&
GetModelMetadataResponse::_Internal::model_spec(const GetModelMetadataResponse* msg) {
  return *msg->model_spec_;
}
void GetModelMetadataResponse::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.GetModelMetadataResponse.model_spec)
}
void GetModelMetadataResponse::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
void GetModelMetadataResponse::clear_metadata() {
  metadata_.Clear();
}
GetModelMetadataResponse::GetModelMetadataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.GetModelMetadataResponse)
}
GetModelMetadataResponse::GetModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.GetModelMetadataResponse)
}
GetModelMetadataResponse::GetModelMetadataResponse(const GetModelMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.GetModelMetadataResponse)
}

void GetModelMetadataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
  model_spec_ = nullptr;
}

GetModelMetadataResponse::~GetModelMetadataResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.GetModelMetadataResponse)
  SharedDtor();
}

void GetModelMetadataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
}

void GetModelMetadataResponse::ArenaDtor(void* object) {
  GetModelMetadataResponse* _this = reinterpret_cast< GetModelMetadataResponse* >(object);
  (void)_this;
}
void GetModelMetadataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelMetadataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelMetadataResponse& GetModelMetadataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelMetadataResponse_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void GetModelMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.GetModelMetadataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelMetadataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelMetadataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.GetModelMetadataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_spec(this), target, stream);
  }

  // map<string, .google.protobuf.Any> metadata = 2;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.GetModelMetadataResponse.MetadataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetModelMetadataResponse_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = GetModelMetadataResponse_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.GetModelMetadataResponse)
  return target;
}

size_t GetModelMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.GetModelMetadataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> metadata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += GetModelMetadataResponse_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelMetadataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.GetModelMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelMetadataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelMetadataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.GetModelMetadataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.GetModelMetadataResponse)
    MergeFrom(*source);
  }
}

void GetModelMetadataResponse::MergeFrom(const GetModelMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.GetModelMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.has_model_spec()) {
    _internal_mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from._internal_model_spec());
  }
}

void GetModelMetadataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.GetModelMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelMetadataResponse::CopyFrom(const GetModelMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.GetModelMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelMetadataResponse::IsInitialized() const {
  return true;
}

void GetModelMetadataResponse::InternalSwap(GetModelMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  swap(model_spec_, other->model_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetadataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::SignatureDefMap* Arena::CreateMaybeMessage< ::tensorflow::serving::SignatureDefMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SignatureDefMap >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::GetModelMetadataRequest* Arena::CreateMaybeMessage< ::tensorflow::serving::GetModelMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::GetModelMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::GetModelMetadataResponse* Arena::CreateMaybeMessage< ::tensorflow::serving::GetModelMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::GetModelMetadataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
