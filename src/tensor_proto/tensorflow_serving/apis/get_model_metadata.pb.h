// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/get_model_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "tensorflow/core/protobuf/meta_graph.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
namespace tensorflow {
namespace serving {
class GetModelMetadataRequest;
class GetModelMetadataRequestDefaultTypeInternal;
extern GetModelMetadataRequestDefaultTypeInternal _GetModelMetadataRequest_default_instance_;
class GetModelMetadataResponse;
class GetModelMetadataResponseDefaultTypeInternal;
extern GetModelMetadataResponseDefaultTypeInternal _GetModelMetadataResponse_default_instance_;
class GetModelMetadataResponse_MetadataEntry_DoNotUse;
class GetModelMetadataResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetModelMetadataResponse_MetadataEntry_DoNotUseDefaultTypeInternal _GetModelMetadataResponse_MetadataEntry_DoNotUse_default_instance_;
class SignatureDefMap;
class SignatureDefMapDefaultTypeInternal;
extern SignatureDefMapDefaultTypeInternal _SignatureDefMap_default_instance_;
class SignatureDefMap_SignatureDefEntry_DoNotUse;
class SignatureDefMap_SignatureDefEntry_DoNotUseDefaultTypeInternal;
extern SignatureDefMap_SignatureDefEntry_DoNotUseDefaultTypeInternal _SignatureDefMap_SignatureDefEntry_DoNotUse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::GetModelMetadataRequest* Arena::CreateMaybeMessage<::tensorflow::serving::GetModelMetadataRequest>(Arena*);
template<> ::tensorflow::serving::GetModelMetadataResponse* Arena::CreateMaybeMessage<::tensorflow::serving::GetModelMetadataResponse>(Arena*);
template<> ::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::serving::GetModelMetadataResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::tensorflow::serving::SignatureDefMap* Arena::CreateMaybeMessage<::tensorflow::serving::SignatureDefMap>(Arena*);
template<> ::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::serving::SignatureDefMap_SignatureDefEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class SignatureDefMap_SignatureDefEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SignatureDefMap_SignatureDefEntry_DoNotUse, 
    std::string, ::tensorflow::SignatureDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SignatureDefMap_SignatureDefEntry_DoNotUse, 
    std::string, ::tensorflow::SignatureDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SignatureDefMap_SignatureDefEntry_DoNotUse();
  SignatureDefMap_SignatureDefEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SignatureDefMap_SignatureDefEntry_DoNotUse& other);
  static const SignatureDefMap_SignatureDefEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SignatureDefMap_SignatureDefEntry_DoNotUse*>(&_SignatureDefMap_SignatureDefEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.serving.SignatureDefMap.SignatureDefEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class SignatureDefMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SignatureDefMap) */ {
 public:
  SignatureDefMap();
  virtual ~SignatureDefMap();

  SignatureDefMap(const SignatureDefMap& from);
  SignatureDefMap(SignatureDefMap&& from) noexcept
    : SignatureDefMap() {
    *this = ::std::move(from);
  }

  inline SignatureDefMap& operator=(const SignatureDefMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDefMap& operator=(SignatureDefMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDefMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureDefMap* internal_default_instance() {
    return reinterpret_cast<const SignatureDefMap*>(
               &_SignatureDefMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignatureDefMap& a, SignatureDefMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDefMap* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDefMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDefMap* New() const final {
    return CreateMaybeMessage<SignatureDefMap>(nullptr);
  }

  SignatureDefMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDefMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDefMap& from);
  void MergeFrom(const SignatureDefMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDefMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SignatureDefMap";
  }
  protected:
  explicit SignatureDefMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSignatureDefFieldNumber = 1,
  };
  // map<string, .tensorflow.SignatureDef> signature_def = 1;
  int signature_def_size() const;
  private:
  int _internal_signature_def_size() const;
  public:
  void clear_signature_def();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >&
      _internal_signature_def() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >*
      _internal_mutable_signature_def();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >&
      signature_def() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >*
      mutable_signature_def();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SignatureDefMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SignatureDefMap_SignatureDefEntry_DoNotUse,
      std::string, ::tensorflow::SignatureDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > signature_def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class GetModelMetadataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.GetModelMetadataRequest) */ {
 public:
  GetModelMetadataRequest();
  virtual ~GetModelMetadataRequest();

  GetModelMetadataRequest(const GetModelMetadataRequest& from);
  GetModelMetadataRequest(GetModelMetadataRequest&& from) noexcept
    : GetModelMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetModelMetadataRequest& operator=(const GetModelMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelMetadataRequest& operator=(GetModelMetadataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelMetadataRequest*>(
               &_GetModelMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetModelMetadataRequest& a, GetModelMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelMetadataRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelMetadataRequest* New() const final {
    return CreateMaybeMessage<GetModelMetadataRequest>(nullptr);
  }

  GetModelMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelMetadataRequest& from);
  void MergeFrom(const GetModelMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.GetModelMetadataRequest";
  }
  protected:
  explicit GetModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldFieldNumber = 2,
    kModelSpecFieldNumber = 1,
  };
  // repeated string metadata_field = 2;
  int metadata_field_size() const;
  private:
  int _internal_metadata_field_size() const;
  public:
  void clear_metadata_field();
  const std::string& metadata_field(int index) const;
  std::string* mutable_metadata_field(int index);
  void set_metadata_field(int index, const std::string& value);
  void set_metadata_field(int index, std::string&& value);
  void set_metadata_field(int index, const char* value);
  void set_metadata_field(int index, const char* value, size_t size);
  std::string* add_metadata_field();
  void add_metadata_field(const std::string& value);
  void add_metadata_field(std::string&& value);
  void add_metadata_field(const char* value);
  void add_metadata_field(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_field();
  private:
  const std::string& _internal_metadata_field(int index) const;
  std::string* _internal_add_metadata_field();
  public:

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.GetModelMetadataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_field_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class GetModelMetadataResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetModelMetadataResponse_MetadataEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetModelMetadataResponse_MetadataEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetModelMetadataResponse_MetadataEntry_DoNotUse();
  GetModelMetadataResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetModelMetadataResponse_MetadataEntry_DoNotUse& other);
  static const GetModelMetadataResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetModelMetadataResponse_MetadataEntry_DoNotUse*>(&_GetModelMetadataResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.serving.GetModelMetadataResponse.MetadataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class GetModelMetadataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.GetModelMetadataResponse) */ {
 public:
  GetModelMetadataResponse();
  virtual ~GetModelMetadataResponse();

  GetModelMetadataResponse(const GetModelMetadataResponse& from);
  GetModelMetadataResponse(GetModelMetadataResponse&& from) noexcept
    : GetModelMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetModelMetadataResponse& operator=(const GetModelMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelMetadataResponse& operator=(GetModelMetadataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelMetadataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetModelMetadataResponse*>(
               &_GetModelMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetModelMetadataResponse& a, GetModelMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelMetadataResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelMetadataResponse* New() const final {
    return CreateMaybeMessage<GetModelMetadataResponse>(nullptr);
  }

  GetModelMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelMetadataResponse& from);
  void MergeFrom(const GetModelMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.GetModelMetadataResponse";
  }
  protected:
  explicit GetModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kModelSpecFieldNumber = 1,
  };
  // map<string, .google.protobuf.Any> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      mutable_metadata();

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.GetModelMetadataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetModelMetadataResponse_MetadataEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > metadata_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignatureDefMap

// map<string, .tensorflow.SignatureDef> signature_def = 1;
inline int SignatureDefMap::_internal_signature_def_size() const {
  return signature_def_.size();
}
inline int SignatureDefMap::signature_def_size() const {
  return _internal_signature_def_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >&
SignatureDefMap::_internal_signature_def() const {
  return signature_def_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >&
SignatureDefMap::signature_def() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.SignatureDefMap.signature_def)
  return _internal_signature_def();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >*
SignatureDefMap::_internal_mutable_signature_def() {
  return signature_def_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >*
SignatureDefMap::mutable_signature_def() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.SignatureDefMap.signature_def)
  return _internal_mutable_signature_def();
}

// -------------------------------------------------------------------

// GetModelMetadataRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool GetModelMetadataRequest::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool GetModelMetadataRequest::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& GetModelMetadataRequest::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& GetModelMetadataRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.GetModelMetadataRequest.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataRequest::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.GetModelMetadataRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataRequest::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataRequest::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.GetModelMetadataRequest.model_spec)
  return _internal_mutable_model_spec();
}
inline void GetModelMetadataRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.GetModelMetadataRequest.model_spec)
}

// repeated string metadata_field = 2;
inline int GetModelMetadataRequest::_internal_metadata_field_size() const {
  return metadata_field_.size();
}
inline int GetModelMetadataRequest::metadata_field_size() const {
  return _internal_metadata_field_size();
}
inline void GetModelMetadataRequest::clear_metadata_field() {
  metadata_field_.Clear();
}
inline std::string* GetModelMetadataRequest::add_metadata_field() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  return _internal_add_metadata_field();
}
inline const std::string& GetModelMetadataRequest::_internal_metadata_field(int index) const {
  return metadata_field_.Get(index);
}
inline const std::string& GetModelMetadataRequest::metadata_field(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  return _internal_metadata_field(index);
}
inline std::string* GetModelMetadataRequest::mutable_metadata_field(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  return metadata_field_.Mutable(index);
}
inline void GetModelMetadataRequest::set_metadata_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  metadata_field_.Mutable(index)->assign(value);
}
inline void GetModelMetadataRequest::set_metadata_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  metadata_field_.Mutable(index)->assign(std::move(value));
}
inline void GetModelMetadataRequest::set_metadata_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline void GetModelMetadataRequest::set_metadata_field(int index, const char* value, size_t size) {
  metadata_field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline std::string* GetModelMetadataRequest::_internal_add_metadata_field() {
  return metadata_field_.Add();
}
inline void GetModelMetadataRequest::add_metadata_field(const std::string& value) {
  metadata_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline void GetModelMetadataRequest::add_metadata_field(std::string&& value) {
  metadata_field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline void GetModelMetadataRequest::add_metadata_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline void GetModelMetadataRequest::add_metadata_field(const char* value, size_t size) {
  metadata_field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.GetModelMetadataRequest.metadata_field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetModelMetadataRequest::metadata_field() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  return metadata_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetModelMetadataRequest::mutable_metadata_field() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.GetModelMetadataRequest.metadata_field)
  return &metadata_field_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetModelMetadataResponse

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool GetModelMetadataResponse::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool GetModelMetadataResponse::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& GetModelMetadataResponse::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& GetModelMetadataResponse::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.GetModelMetadataResponse.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataResponse::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataResponse::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.GetModelMetadataResponse.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataResponse::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* GetModelMetadataResponse::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.GetModelMetadataResponse.model_spec)
  return _internal_mutable_model_spec();
}
inline void GetModelMetadataResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.GetModelMetadataResponse.model_spec)
}

// map<string, .google.protobuf.Any> metadata = 2;
inline int GetModelMetadataResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetModelMetadataResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
GetModelMetadataResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
GetModelMetadataResponse::metadata() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.GetModelMetadataResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
GetModelMetadataResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
GetModelMetadataResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.GetModelMetadataResponse.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fget_5fmodel_5fmetadata_2eproto
