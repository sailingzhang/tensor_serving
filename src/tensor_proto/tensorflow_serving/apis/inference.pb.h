// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/inference.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finference_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finference_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/classification.pb.h"
#include "tensorflow_serving/apis/input.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow_serving/apis/regression.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2finference_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2finference_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto;
namespace tensorflow {
namespace serving {
class InferenceResult;
class InferenceResultDefaultTypeInternal;
extern InferenceResultDefaultTypeInternal _InferenceResult_default_instance_;
class InferenceTask;
class InferenceTaskDefaultTypeInternal;
extern InferenceTaskDefaultTypeInternal _InferenceTask_default_instance_;
class MultiInferenceRequest;
class MultiInferenceRequestDefaultTypeInternal;
extern MultiInferenceRequestDefaultTypeInternal _MultiInferenceRequest_default_instance_;
class MultiInferenceResponse;
class MultiInferenceResponseDefaultTypeInternal;
extern MultiInferenceResponseDefaultTypeInternal _MultiInferenceResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::InferenceResult* Arena::CreateMaybeMessage<::tensorflow::serving::InferenceResult>(Arena*);
template<> ::tensorflow::serving::InferenceTask* Arena::CreateMaybeMessage<::tensorflow::serving::InferenceTask>(Arena*);
template<> ::tensorflow::serving::MultiInferenceRequest* Arena::CreateMaybeMessage<::tensorflow::serving::MultiInferenceRequest>(Arena*);
template<> ::tensorflow::serving::MultiInferenceResponse* Arena::CreateMaybeMessage<::tensorflow::serving::MultiInferenceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class InferenceTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.InferenceTask) */ {
 public:
  InferenceTask();
  virtual ~InferenceTask();

  InferenceTask(const InferenceTask& from);
  InferenceTask(InferenceTask&& from) noexcept
    : InferenceTask() {
    *this = ::std::move(from);
  }

  inline InferenceTask& operator=(const InferenceTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceTask& operator=(InferenceTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InferenceTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceTask* internal_default_instance() {
    return reinterpret_cast<const InferenceTask*>(
               &_InferenceTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InferenceTask& a, InferenceTask& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceTask* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferenceTask* New() const final {
    return CreateMaybeMessage<InferenceTask>(nullptr);
  }

  InferenceTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferenceTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InferenceTask& from);
  void MergeFrom(const InferenceTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.InferenceTask";
  }
  protected:
  explicit InferenceTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 2,
    kModelSpecFieldNumber = 1,
  };
  // string method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.InferenceTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finference_2eproto;
};
// -------------------------------------------------------------------

class InferenceResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.InferenceResult) */ {
 public:
  InferenceResult();
  virtual ~InferenceResult();

  InferenceResult(const InferenceResult& from);
  InferenceResult(InferenceResult&& from) noexcept
    : InferenceResult() {
    *this = ::std::move(from);
  }

  inline InferenceResult& operator=(const InferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceResult& operator=(InferenceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InferenceResult& default_instance();

  enum ResultCase {
    kClassificationResult = 2,
    kRegressionResult = 3,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceResult* internal_default_instance() {
    return reinterpret_cast<const InferenceResult*>(
               &_InferenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InferenceResult& a, InferenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceResult* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferenceResult* New() const final {
    return CreateMaybeMessage<InferenceResult>(nullptr);
  }

  InferenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferenceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InferenceResult& from);
  void MergeFrom(const InferenceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.InferenceResult";
  }
  protected:
  explicit InferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelSpecFieldNumber = 1,
    kClassificationResultFieldNumber = 2,
    kRegressionResultFieldNumber = 3,
  };
  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.serving.ClassificationResult classification_result = 2;
  bool has_classification_result() const;
  private:
  bool _internal_has_classification_result() const;
  public:
  void clear_classification_result();
  const ::tensorflow::serving::ClassificationResult& classification_result() const;
  ::tensorflow::serving::ClassificationResult* release_classification_result();
  ::tensorflow::serving::ClassificationResult* mutable_classification_result();
  void set_allocated_classification_result(::tensorflow::serving::ClassificationResult* classification_result);
  private:
  const ::tensorflow::serving::ClassificationResult& _internal_classification_result() const;
  ::tensorflow::serving::ClassificationResult* _internal_mutable_classification_result();
  public:
  void unsafe_arena_set_allocated_classification_result(
      ::tensorflow::serving::ClassificationResult* classification_result);
  ::tensorflow::serving::ClassificationResult* unsafe_arena_release_classification_result();

  // .tensorflow.serving.RegressionResult regression_result = 3;
  bool has_regression_result() const;
  private:
  bool _internal_has_regression_result() const;
  public:
  void clear_regression_result();
  const ::tensorflow::serving::RegressionResult& regression_result() const;
  ::tensorflow::serving::RegressionResult* release_regression_result();
  ::tensorflow::serving::RegressionResult* mutable_regression_result();
  void set_allocated_regression_result(::tensorflow::serving::RegressionResult* regression_result);
  private:
  const ::tensorflow::serving::RegressionResult& _internal_regression_result() const;
  ::tensorflow::serving::RegressionResult* _internal_mutable_regression_result();
  public:
  void unsafe_arena_set_allocated_regression_result(
      ::tensorflow::serving::RegressionResult* regression_result);
  ::tensorflow::serving::RegressionResult* unsafe_arena_release_regression_result();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.InferenceResult)
 private:
  class _Internal;
  void set_has_classification_result();
  void set_has_regression_result();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  union ResultUnion {
    ResultUnion() {}
    ::tensorflow::serving::ClassificationResult* classification_result_;
    ::tensorflow::serving::RegressionResult* regression_result_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finference_2eproto;
};
// -------------------------------------------------------------------

class MultiInferenceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MultiInferenceRequest) */ {
 public:
  MultiInferenceRequest();
  virtual ~MultiInferenceRequest();

  MultiInferenceRequest(const MultiInferenceRequest& from);
  MultiInferenceRequest(MultiInferenceRequest&& from) noexcept
    : MultiInferenceRequest() {
    *this = ::std::move(from);
  }

  inline MultiInferenceRequest& operator=(const MultiInferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInferenceRequest& operator=(MultiInferenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiInferenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiInferenceRequest* internal_default_instance() {
    return reinterpret_cast<const MultiInferenceRequest*>(
               &_MultiInferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiInferenceRequest& a, MultiInferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInferenceRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiInferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiInferenceRequest* New() const final {
    return CreateMaybeMessage<MultiInferenceRequest>(nullptr);
  }

  MultiInferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiInferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiInferenceRequest& from);
  void MergeFrom(const MultiInferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.MultiInferenceRequest";
  }
  protected:
  explicit MultiInferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // repeated .tensorflow.serving.InferenceTask tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::tensorflow::serving::InferenceTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceTask >*
      mutable_tasks();
  private:
  const ::tensorflow::serving::InferenceTask& _internal_tasks(int index) const;
  ::tensorflow::serving::InferenceTask* _internal_add_tasks();
  public:
  const ::tensorflow::serving::InferenceTask& tasks(int index) const;
  ::tensorflow::serving::InferenceTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceTask >&
      tasks() const;

  // .tensorflow.serving.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::tensorflow::serving::Input& input() const;
  ::tensorflow::serving::Input* release_input();
  ::tensorflow::serving::Input* mutable_input();
  void set_allocated_input(::tensorflow::serving::Input* input);
  private:
  const ::tensorflow::serving::Input& _internal_input() const;
  ::tensorflow::serving::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::tensorflow::serving::Input* input);
  ::tensorflow::serving::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MultiInferenceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceTask > tasks_;
  ::tensorflow::serving::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finference_2eproto;
};
// -------------------------------------------------------------------

class MultiInferenceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MultiInferenceResponse) */ {
 public:
  MultiInferenceResponse();
  virtual ~MultiInferenceResponse();

  MultiInferenceResponse(const MultiInferenceResponse& from);
  MultiInferenceResponse(MultiInferenceResponse&& from) noexcept
    : MultiInferenceResponse() {
    *this = ::std::move(from);
  }

  inline MultiInferenceResponse& operator=(const MultiInferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInferenceResponse& operator=(MultiInferenceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiInferenceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiInferenceResponse* internal_default_instance() {
    return reinterpret_cast<const MultiInferenceResponse*>(
               &_MultiInferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiInferenceResponse& a, MultiInferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInferenceResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiInferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiInferenceResponse* New() const final {
    return CreateMaybeMessage<MultiInferenceResponse>(nullptr);
  }

  MultiInferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiInferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiInferenceResponse& from);
  void MergeFrom(const MultiInferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.MultiInferenceResponse";
  }
  protected:
  explicit MultiInferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2finference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .tensorflow.serving.InferenceResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::tensorflow::serving::InferenceResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceResult >*
      mutable_results();
  private:
  const ::tensorflow::serving::InferenceResult& _internal_results(int index) const;
  ::tensorflow::serving::InferenceResult* _internal_add_results();
  public:
  const ::tensorflow::serving::InferenceResult& results(int index) const;
  ::tensorflow::serving::InferenceResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MultiInferenceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceResult > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2finference_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InferenceTask

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool InferenceTask::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool InferenceTask::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& InferenceTask::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& InferenceTask::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceTask.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* InferenceTask::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* InferenceTask::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceTask.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* InferenceTask::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* InferenceTask::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceTask.model_spec)
  return _internal_mutable_model_spec();
}
inline void InferenceTask::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceTask.model_spec)
}

// string method_name = 2;
inline void InferenceTask::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& InferenceTask::method_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceTask.method_name)
  return _internal_method_name();
}
inline void InferenceTask::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.InferenceTask.method_name)
}
inline std::string* InferenceTask::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceTask.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& InferenceTask::_internal_method_name() const {
  return method_name_.Get();
}
inline void InferenceTask::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void InferenceTask::set_method_name(std::string&& value) {
  
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.InferenceTask.method_name)
}
inline void InferenceTask::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.InferenceTask.method_name)
}
inline void InferenceTask::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.InferenceTask.method_name)
}
inline std::string* InferenceTask::_internal_mutable_method_name() {
  
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* InferenceTask::release_method_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceTask.method_name)
  
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void InferenceTask::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceTask.method_name)
}
inline std::string* InferenceTask::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceTask.method_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InferenceTask::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceTask.method_name)
}

// -------------------------------------------------------------------

// InferenceResult

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool InferenceResult::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool InferenceResult::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& InferenceResult::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& InferenceResult::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* InferenceResult::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* InferenceResult::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* InferenceResult::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* InferenceResult::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.model_spec)
  return _internal_mutable_model_spec();
}
inline void InferenceResult::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceResult.model_spec)
}

// .tensorflow.serving.ClassificationResult classification_result = 2;
inline bool InferenceResult::_internal_has_classification_result() const {
  return result_case() == kClassificationResult;
}
inline bool InferenceResult::has_classification_result() const {
  return _internal_has_classification_result();
}
inline void InferenceResult::set_has_classification_result() {
  _oneof_case_[0] = kClassificationResult;
}
inline ::tensorflow::serving::ClassificationResult* InferenceResult::release_classification_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.classification_result)
  if (_internal_has_classification_result()) {
    clear_has_result();
      ::tensorflow::serving::ClassificationResult* temp = result_.classification_result_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.classification_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::ClassificationResult& InferenceResult::_internal_classification_result() const {
  return _internal_has_classification_result()
      ? *result_.classification_result_
      : *reinterpret_cast< ::tensorflow::serving::ClassificationResult*>(&::tensorflow::serving::_ClassificationResult_default_instance_);
}
inline const ::tensorflow::serving::ClassificationResult& InferenceResult::classification_result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.classification_result)
  return _internal_classification_result();
}
inline ::tensorflow::serving::ClassificationResult* InferenceResult::unsafe_arena_release_classification_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceResult.classification_result)
  if (_internal_has_classification_result()) {
    clear_has_result();
    ::tensorflow::serving::ClassificationResult* temp = result_.classification_result_;
    result_.classification_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InferenceResult::unsafe_arena_set_allocated_classification_result(::tensorflow::serving::ClassificationResult* classification_result) {
  clear_result();
  if (classification_result) {
    set_has_classification_result();
    result_.classification_result_ = classification_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceResult.classification_result)
}
inline ::tensorflow::serving::ClassificationResult* InferenceResult::_internal_mutable_classification_result() {
  if (!_internal_has_classification_result()) {
    clear_result();
    set_has_classification_result();
    result_.classification_result_ = CreateMaybeMessage< ::tensorflow::serving::ClassificationResult >(
        GetArenaNoVirtual());
  }
  return result_.classification_result_;
}
inline ::tensorflow::serving::ClassificationResult* InferenceResult::mutable_classification_result() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.classification_result)
  return _internal_mutable_classification_result();
}

// .tensorflow.serving.RegressionResult regression_result = 3;
inline bool InferenceResult::_internal_has_regression_result() const {
  return result_case() == kRegressionResult;
}
inline bool InferenceResult::has_regression_result() const {
  return _internal_has_regression_result();
}
inline void InferenceResult::set_has_regression_result() {
  _oneof_case_[0] = kRegressionResult;
}
inline ::tensorflow::serving::RegressionResult* InferenceResult::release_regression_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.regression_result)
  if (_internal_has_regression_result()) {
    clear_has_result();
      ::tensorflow::serving::RegressionResult* temp = result_.regression_result_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.regression_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::RegressionResult& InferenceResult::_internal_regression_result() const {
  return _internal_has_regression_result()
      ? *result_.regression_result_
      : *reinterpret_cast< ::tensorflow::serving::RegressionResult*>(&::tensorflow::serving::_RegressionResult_default_instance_);
}
inline const ::tensorflow::serving::RegressionResult& InferenceResult::regression_result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.regression_result)
  return _internal_regression_result();
}
inline ::tensorflow::serving::RegressionResult* InferenceResult::unsafe_arena_release_regression_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceResult.regression_result)
  if (_internal_has_regression_result()) {
    clear_has_result();
    ::tensorflow::serving::RegressionResult* temp = result_.regression_result_;
    result_.regression_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InferenceResult::unsafe_arena_set_allocated_regression_result(::tensorflow::serving::RegressionResult* regression_result) {
  clear_result();
  if (regression_result) {
    set_has_regression_result();
    result_.regression_result_ = regression_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceResult.regression_result)
}
inline ::tensorflow::serving::RegressionResult* InferenceResult::_internal_mutable_regression_result() {
  if (!_internal_has_regression_result()) {
    clear_result();
    set_has_regression_result();
    result_.regression_result_ = CreateMaybeMessage< ::tensorflow::serving::RegressionResult >(
        GetArenaNoVirtual());
  }
  return result_.regression_result_;
}
inline ::tensorflow::serving::RegressionResult* InferenceResult::mutable_regression_result() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.regression_result)
  return _internal_mutable_regression_result();
}

inline bool InferenceResult::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void InferenceResult::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline InferenceResult::ResultCase InferenceResult::result_case() const {
  return InferenceResult::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultiInferenceRequest

// repeated .tensorflow.serving.InferenceTask tasks = 1;
inline int MultiInferenceRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int MultiInferenceRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline void MultiInferenceRequest::clear_tasks() {
  tasks_.Clear();
}
inline ::tensorflow::serving::InferenceTask* MultiInferenceRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceTask >*
MultiInferenceRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.MultiInferenceRequest.tasks)
  return &tasks_;
}
inline const ::tensorflow::serving::InferenceTask& MultiInferenceRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::tensorflow::serving::InferenceTask& MultiInferenceRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceRequest.tasks)
  return _internal_tasks(index);
}
inline ::tensorflow::serving::InferenceTask* MultiInferenceRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::tensorflow::serving::InferenceTask* MultiInferenceRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.MultiInferenceRequest.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceTask >&
MultiInferenceRequest::tasks() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_;
}

// .tensorflow.serving.Input input = 2;
inline bool MultiInferenceRequest::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool MultiInferenceRequest::has_input() const {
  return _internal_has_input();
}
inline const ::tensorflow::serving::Input& MultiInferenceRequest::_internal_input() const {
  const ::tensorflow::serving::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::Input*>(
      &::tensorflow::serving::_Input_default_instance_);
}
inline const ::tensorflow::serving::Input& MultiInferenceRequest::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceRequest.input)
  return _internal_input();
}
inline ::tensorflow::serving::Input* MultiInferenceRequest::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::Input* MultiInferenceRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MultiInferenceRequest.input)
  
  ::tensorflow::serving::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::Input* MultiInferenceRequest::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::tensorflow::serving::Input* MultiInferenceRequest::mutable_input() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceRequest.input)
  return _internal_mutable_input();
}
inline void MultiInferenceRequest::set_allocated_input(::tensorflow::serving::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input)->GetArena();
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MultiInferenceRequest.input)
}

// -------------------------------------------------------------------

// MultiInferenceResponse

// repeated .tensorflow.serving.InferenceResult results = 1;
inline int MultiInferenceResponse::_internal_results_size() const {
  return results_.size();
}
inline int MultiInferenceResponse::results_size() const {
  return _internal_results_size();
}
inline void MultiInferenceResponse::clear_results() {
  results_.Clear();
}
inline ::tensorflow::serving::InferenceResult* MultiInferenceResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceResult >*
MultiInferenceResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.MultiInferenceResponse.results)
  return &results_;
}
inline const ::tensorflow::serving::InferenceResult& MultiInferenceResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::tensorflow::serving::InferenceResult& MultiInferenceResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceResponse.results)
  return _internal_results(index);
}
inline ::tensorflow::serving::InferenceResult* MultiInferenceResponse::_internal_add_results() {
  return results_.Add();
}
inline ::tensorflow::serving::InferenceResult* MultiInferenceResponse::add_results() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.MultiInferenceResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::InferenceResult >&
MultiInferenceResponse::results() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.MultiInferenceResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2finference_2eproto
